package dev.rx.app2proxy

import android.app.Activity
import android.content.Context
import android.graphics.Color
import android.graphics.drawable.ColorDrawable
import android.os.Build
import android.util.Log
import android.view.MenuItem
import android.view.View
import androidx.appcompat.view.menu.MenuBuilder
import androidx.appcompat.widget.ActionMenuView
import androidx.appcompat.widget.Toolbar
import androidx.core.content.ContextCompat
import androidx.core.view.forEach
import com.google.android.material.appbar.MaterialToolbar
import com.google.android.material.color.DynamicColors
import java.lang.reflect.Method

object AmoledDynamicColorScheme {
    private const val TAG = "AmoledDynamicColorScheme"
    
    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç AMOLED –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —á–µ—Ä–Ω–æ–≥–æ —Ñ–æ–Ω–∞
     */
    fun applyAmoledDynamicColors(activity: Activity) {
        try {
            Log.d(TAG, "üé® –ü—Ä–∏–º–µ–Ω—è–µ–º AMOLED + Material You –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞")
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞
            DynamicColors.applyToActivityIfAvailable(activity)
            
            // –ó–∞—Ç–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ–Ω –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —á–µ—Ä–Ω—ã–π
            activity.window.decorView.setBackgroundColor(Color.BLACK)
            
            Log.d(TAG, "‚úÖ AMOLED –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AMOLED –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ü–≤–µ—Ç–æ–≤", e)
        }
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —á–µ—Ä–Ω—ã–π —Ñ–æ–Ω –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É view, —Å–æ—Ö—Ä–∞–Ω—è—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    fun applyAmoledBackgroundToView(view: View) {
        try {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —á–µ—Ä–Ω—ã–π —Ñ–æ–Ω —Ç–æ–ª—å–∫–æ –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
            view.setBackgroundColor(Color.BLACK)
            Log.d(TAG, "‚úÖ –ß–µ—Ä–Ω—ã–π AMOLED —Ñ–æ–Ω –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ view")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AMOLED —Ñ–æ–Ω–∞ –∫ view", e)
        }
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —á–µ—Ä–Ω—ã–π —Ñ–æ–Ω –∫ AppBar/Toolbar –¥–ª—è AMOLED —Ç–µ–º—ã
     */
    fun applyAmoledToolbarStyle(toolbar: MaterialToolbar, activity: Activity) {
        try {
            Log.d(TAG, "üé® –ü—Ä–∏–º–µ–Ω—è–µ–º AMOLED —Å—Ç–∏–ª—å –∫ Toolbar")
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–Ω—ã–π —Ñ–æ–Ω –¥–ª—è toolbar
            toolbar.setBackgroundColor(Color.BLACK)
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–ª—ã–π —Ü–≤–µ—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            toolbar.setTitleTextColor(Color.WHITE)
            toolbar.setSubtitleTextColor(Color.WHITE)
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–ª—ã–π —Ü–≤–µ—Ç –¥–ª—è –∏–∫–æ–Ω–æ–∫ –≤ toolbar
            val whiteColor = ContextCompat.getColor(activity, android.R.color.white)
            toolbar.navigationIcon?.setTint(whiteColor)
            toolbar.overflowIcon?.setTint(whiteColor)
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–ª—ã–π —Ü–≤–µ—Ç –¥–ª—è –º–µ–Ω—é
            val menu = toolbar.menu
            for (i in 0 until menu.size()) {
                val menuItem = menu.getItem(i)
                menuItem.icon?.setTint(whiteColor)
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —á–µ—Ä–Ω—ã–π —Ñ–æ–Ω –∫ overflow menu
            applyAmoledToOverflowMenu(toolbar, activity)
            
            Log.d(TAG, "‚úÖ AMOLED —Å—Ç–∏–ª—å –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ Toolbar")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AMOLED —Å—Ç–∏–ª—è –∫ Toolbar", e)
        }
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç AMOLED —Å—Ç–∏–ª—å –∫ overflow menu
     */
    private fun applyAmoledToOverflowMenu(toolbar: MaterialToolbar, activity: Activity) {
        try {
            Log.d(TAG, "üé® –ü—Ä–∏–º–µ–Ω—è–µ–º AMOLED —Å—Ç–∏–ª—å –∫ overflow menu")
            
            // –ú–µ—Ç–æ–¥ 1: –ß–µ—Ä–µ–∑ –ø–æ–ø—ã—Ç–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ popup theme
            try {
                toolbar.popupTheme = R.style.AmoledPopupMenuOverride
            } catch (e: Exception) {
                Log.w(TAG, "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å popup theme", e)
            }
            
            // –ú–µ—Ç–æ–¥ 2: –ß–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –∫ ActionMenuView
            try {
                val actionMenuView = findActionMenuView(toolbar)
                if (actionMenuView != null) {
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º popup theme –¥–ª—è ActionMenuView
                    val setPopupThemeMethod = ActionMenuView::class.java.getMethod("setPopupTheme", Int::class.java)
                    setPopupThemeMethod.invoke(actionMenuView, R.style.AmoledPopupMenuOverride)
                    Log.d(TAG, "‚úÖ Popup theme —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ ActionMenuView")
                }
            } catch (e: Exception) {
                Log.w(TAG, "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å popup theme —á–µ—Ä–µ–∑ ActionMenuView", e)
            }
            
            // –ú–µ—Ç–æ–¥ 3: –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ø–æ–∫–∞–∑ overflow menu
            interceptOverflowMenuShow(toolbar, activity)
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AMOLED –∫ overflow menu", e)
        }
    }
    
    /**
     * –ù–∞—Ö–æ–¥–∏—Ç ActionMenuView –≤–Ω—É—Ç—Ä–∏ Toolbar
     */
    private fun findActionMenuView(toolbar: MaterialToolbar): ActionMenuView? {
        try {
            for (i in 0 until toolbar.childCount) {
                val child = toolbar.getChildAt(i)
                if (child is ActionMenuView) {
                    return child
                }
            }
        } catch (e: Exception) {
            Log.w(TAG, "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ ActionMenuView", e)
        }
        return null
    }
    
    /**
     * –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫–∞–∑ overflow menu
     */
    private fun interceptOverflowMenuShow(toolbar: MaterialToolbar, activity: Activity) {
        try {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ overflow –∫–Ω–æ–ø–∫–∏
            toolbar.setOnMenuItemClickListener { menuItem ->
                false // –ù–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ –ø—É–Ω–∫—Ç–∞–º –º–µ–Ω—é
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ overflow –∫–Ω–æ–ø–∫–µ
            val actionMenuView = findActionMenuView(toolbar)
            actionMenuView?.let { menuView ->
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π popup theme
                try {
                    val field = ActionMenuView::class.java.getDeclaredField("mPopupTheme")
                    field.isAccessible = true
                    field.set(menuView, R.style.AmoledPopupMenuOverride)
                    Log.d(TAG, "‚úÖ Popup theme —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –ø–æ–ª–µ mPopupTheme")
                } catch (e: Exception) {
                    Log.w(TAG, "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å popup theme —á–µ—Ä–µ–∑ –ø–æ–ª–µ", e)
                }
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ overflow menu", e)
        }
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç AMOLED —Ü–≤–µ—Ç–∞ –∫–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –º–µ–Ω—é –ø–æ—Å–ª–µ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
     */
    fun applyAmoledToMenuItems(toolbar: MaterialToolbar, activity: Activity) {
        try {
            Log.d(TAG, "üé® –ü—Ä–∏–º–µ–Ω—è–µ–º AMOLED –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –º–µ–Ω—é")
            
            val menu = toolbar.menu
            if (menu is MenuBuilder) {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ–Ω –¥–ª—è popup
                try {
                    val setCallback = MenuBuilder::class.java.getMethod("setCallback", MenuBuilder.Callback::class.java)
                    val originalCallback = menu.callback
                    
                    val customCallback = object : MenuBuilder.Callback {
                        override fun onMenuItemSelected(menu: MenuBuilder, item: MenuItem): Boolean {
                            return originalCallback?.onMenuItemSelected(menu, item) ?: false
                        }
                        
                        override fun onMenuModeChange(menu: MenuBuilder) {
                            originalCallback?.onMenuModeChange(menu)
                        }
                    }
                    
                    setCallback.invoke(menu, customCallback)
                } catch (e: Exception) {
                    Log.w(TAG, "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π callback", e)
                }
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–ª—ã–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
            val whiteColor = ContextCompat.getColor(activity, android.R.color.white)
            for (i in 0 until menu.size()) {
                val menuItem = menu.getItem(i)
                menuItem.icon?.setTint(whiteColor)
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AMOLED –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –º–µ–Ω—é", e)
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞
     */
    fun canApplyDynamicColors(): Boolean {
        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.S
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è AMOLED –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ü–≤–µ—Ç–æ–≤
     */
    fun getAmoledSurfaceColor(): Int {
        return Color.BLACK // –í—Å–µ–≥–¥–∞ —á–µ—Ä–Ω—ã–π –¥–ª—è AMOLED
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –¥–ª—è AMOLED —Å —É—á–µ—Ç–æ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ü–≤–µ—Ç–æ–≤
     */
    fun getAmoledBackgroundColor(): Int {
        return Color.BLACK // –í—Å–µ–≥–¥–∞ —á–µ—Ä–Ω—ã–π –¥–ª—è AMOLED
    }
}
