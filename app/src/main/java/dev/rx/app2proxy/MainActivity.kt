package dev.rx.app2proxy

import android.Manifest
import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.provider.Settings
import android.view.Menu
import android.view.MenuItem
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.core.view.ViewCompat
import androidx.core.view.WindowCompat
import androidx.core.view.WindowInsetsCompat
import com.google.android.material.appbar.MaterialToolbar
import com.google.android.material.bottomnavigation.BottomNavigationView
import dev.rx.app2proxy.databinding.ActivityMainBinding
import java.io.File

class MainActivity : AppCompatActivity(), RulesUpdateListener {
    private lateinit var binding: ActivityMainBinding
    private lateinit var viewPagerAdapter: ViewPagerAdapter
    private var showSystemApps = false

    // –†–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º Android 15
    private val permissions = buildList {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            add(Manifest.permission.QUERY_ALL_PACKAGES)
        }
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            add(Manifest.permission.POST_NOTIFICATIONS)
        }
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
            add(Manifest.permission.FOREGROUND_SERVICE_SPECIAL_USE)
        }
    }.toTypedArray()

    private val permissionLauncher =
        registerForActivityResult(androidx.activity.result.contract.ActivityResultContracts.RequestMultiplePermissions()) { permissions ->
            handlePermissionResults(permissions)
        }

    override fun onCreate(savedInstanceState: Bundle?) {
        try {
            android.util.Log.d("MainActivity", "=== MainActivity onCreate (Android ${Build.VERSION.SDK_INT}) ===")
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏ Android
            applyThemeForAndroidVersion()
            
            super.onCreate(savedInstanceState)
            
            // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è binding
            binding = ActivityMainBinding.inflate(layoutInflater)
            setContentView(binding.root)

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º edge-to-edge —Ä–µ–∂–∏–º
            setupEdgeToEdge()

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ toolbar
            setupToolbar()

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ViewPager
            setupViewPager()

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∏–∂–Ω–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            setupBottomNavigation()

            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Android 15
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.VANILLA_ICE_CREAM) {
                performAndroid15Setup()
            } else {
                performStandardSetup()
            }

            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            requestNecessaryPermissions()
            
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ onCreate", e)
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –æ—à–∏–±–∫–æ–π
            try {
                AlertDialog.Builder(this)
                    .setTitle("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞")
                    .setMessage("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${e.message}")
                    .setPositiveButton("OK") { _, _ -> 
                        finish()
                    }
                    .show()
            } catch (dialogError: Exception) {
                android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞", dialogError)
                finish()
            }
        }
    }
    
    private fun applyThemeForAndroidVersion() {
        try {
            val prefs = getSharedPreferences("proxy_prefs", MODE_PRIVATE)
            val useMaterialYou = prefs.getBoolean("material_you", false)
            
            // Material You —Ç–æ–ª—å–∫–æ –¥–ª—è Android 12+
            if (useMaterialYou && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                try {
                    com.google.android.material.color.DynamicColors.applyToActivityIfAvailable(this)
                    android.util.Log.d("MainActivity", "‚úÖ Material You –ø—Ä–∏–º–µ–Ω–µ–Ω")
                } catch (e: Exception) {
                    android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è Material You", e)
                }
            }

            setTheme(R.style.Theme_App2Proxy)
            
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã", e)
            setTheme(R.style.Theme_App2Proxy) // Fallback —Ç–µ–º–∞
        }
    }
    
    private fun setupToolbar() {
        try {
            val toolbar: MaterialToolbar = binding.toolbar
            setSupportActionBar(toolbar)
            supportActionBar?.title = getString(R.string.app_name)
            supportActionBar?.setDisplayShowTitleEnabled(true)
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ toolbar", e)
        }
    }
    
    private fun performAndroid15Setup() {
        android.util.Log.d("MainActivity", "üî• –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è Android 15")
        
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ Android
            val prefs = getSharedPreferences("proxy_prefs", MODE_PRIVATE)
            prefs.edit()
                .putBoolean("is_android_15", true)
                .putInt("android_api_level", Build.VERSION.SDK_INT)
                .putString("android_version", Build.VERSION.RELEASE)
                .apply()
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è Android 15
            performAndroid15Diagnostics()
            
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Android 15", e)
            // Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
            performStandardSetup()
        }
    }
    
    private fun performStandardSetup() {
        android.util.Log.d("MainActivity", "üì± –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É")
        
        try {
            // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏
            performExtendedBootDiagnostics()
            
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", e)
        }
    }
    
    private fun performAndroid15Diagnostics() {
        android.util.Log.d("MainActivity", "üî• Android 15 –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
        
        try {
            val prefs = getSharedPreferences("proxy_prefs", MODE_PRIVATE)
            val selectedUids = prefs.getStringSet("selected_uids", emptySet()) ?: emptySet()
            
            if (selectedUids.isEmpty()) {
                android.util.Log.d("MainActivity", "‚ùå –ù–µ—Ç –ø—Ä–∞–≤–∏–ª –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Android 15")
                Toast.makeText(this, "–ù–µ—Ç –ø—Ä–∞–≤–∏–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏", Toast.LENGTH_SHORT).show()
                return
            }
            
            android.util.Log.d("MainActivity", "üìã Android 15: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ${selectedUids.size} –ø—Ä–∞–≤–∏–ª")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Android 15 –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏
            val android15BootHandled = prefs.getBoolean("android_15_boot_handled", false)
            val lastAndroid15Restore = prefs.getLong("last_android_15_restore", 0)
            val android15Success = prefs.getBoolean("android_15_success", false)
            val android15Result = prefs.getString("android_15_result", "no_result")
            
            android.util.Log.d("MainActivity", "üî• Android 15 boot –æ–±—Ä–∞–±–æ—Ç–∞–Ω: $android15BootHandled")
            android.util.Log.d("MainActivity", "üî• –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: $lastAndroid15Restore")
            android.util.Log.d("MainActivity", "üî• –£—Å–ø–µ—Ö: $android15Success")
            android.util.Log.d("MainActivity", "üî• –†–µ–∑—É–ª—å—Ç–∞—Ç: $android15Result")
            
            // –ß–∏—Ç–∞–µ–º –ª–æ–≥–∏ Android 15
            readAndroid15Logs()
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —Ä—É—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            val currentTime = System.currentTimeMillis()
            val currentBootTime = currentTime - android.os.SystemClock.elapsedRealtime()
            val timeSinceRestore = currentTime - lastAndroid15Restore
            
            val needsRestore = when {
                !android15BootHandled && (currentTime - currentBootTime) > 300000 -> {
                    android.util.Log.d("MainActivity", "üîß Android 15: BootReceiver –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
                    true
                }
                android15BootHandled && !android15Success && timeSinceRestore > 180000 -> {
                    android.util.Log.d("MainActivity", "üîß Android 15: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
                    true
                }
                android15Success && timeSinceRestore < 600000 -> {
                    android.util.Log.d("MainActivity", "‚úÖ Android 15: –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    false
                }
                else -> {
                    android.util.Log.d("MainActivity", "üîß Android 15: –°—Ç–∞—Ç—É—Å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º")
                    true
                }
            }
            
            if (needsRestore) {
                android.util.Log.d("MainActivity", "üîß –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è Android 15")
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞
                IptablesService.applyRulesFromPrefs(this)
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                prefs.edit()
                    .putLong("last_manual_restore_android_15", currentTime)
                    .putBoolean("manual_restore_android_15", true)
                    .apply()
                
                val message = buildString {
                    append("üî• Android 15 –æ–±–Ω–∞—Ä—É–∂–µ–Ω\n")
                    if (!android15BootHandled) {
                        append("‚ùå –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞\n")
                        append("üí° –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n")
                    } else {
                        append("‚ö†Ô∏è –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –Ω–æ –ø—Ä–∞–≤–∏–ª–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å\n")
                    }
                    append("üîß –ü—Ä–∞–≤–∏–ª–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Ä—É—á–Ω—É—é")
                }
                
                Toast.makeText(this, message, Toast.LENGTH_LONG).show()
                
            } else {
                val minutes = timeSinceRestore / 60000
                Toast.makeText(
                    this, 
                    "‚úÖ Android 15: –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç ($minutes –º–∏–Ω –Ω–∞–∑–∞–¥)", 
                    Toast.LENGTH_SHORT
                ).show()
            }
            
            // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–ª–∞–≥–∏
            prefs.edit()
                .putBoolean("android_15_boot_handled", false)
                .apply()
            
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "‚ùå –û—à–∏–±–∫–∞ Android 15 –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏", e)
            
            // –ê–≤–∞—Ä–∏–π–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            try {
                IptablesService.applyRulesFromPrefs(this)
                Toast.makeText(this, "–ü—Ä–∞–≤–∏–ª–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Android 15", Toast.LENGTH_SHORT).show()
            } catch (restoreError: Exception) {
                android.util.Log.e("MainActivity", "‚ùå –û—à–∏–±–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Android 15", restoreError)
            }
        }
    }
    
    private fun readAndroid15Logs() {
        try {
            val bootLogFile = File(filesDir, "boot_receiver_log.txt")
            if (bootLogFile.exists()) {
                val log = bootLogFile.readText()
                android.util.Log.d("MainActivity", "üìÑ Android 15 Boot Log:\n$log")
            }
            
            val serviceLogFile = File(filesDir, "service_log.txt")
            if (serviceLogFile.exists()) {
                val log = serviceLogFile.readText()
                android.util.Log.d("MainActivity", "üìÑ Android 15 Service Log:\n$log")
            }
            
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤ Android 15", e)
        }
    }
    
    private fun performExtendedBootDiagnostics() {
        // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Android
        try {
            android.util.Log.d("MainActivity", "=== –°–¢–ê–ù–î–ê–†–¢–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–í–¢–û–ó–ê–ì–†–£–ó–ö–ò ===")
            
            val prefs = getSharedPreferences("proxy_prefs", MODE_PRIVATE)
            val selectedUids = prefs.getStringSet("selected_uids", emptySet()) ?: emptySet()
            
            if (selectedUids.isEmpty()) {
                android.util.Log.d("MainActivity", "‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª")
                return
            }
            
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...
            val bootReceiverActivated = prefs.getBoolean("boot_receiver_activated", false)
            val serviceRestoreSuccess = prefs.getBoolean("service_restore_success", false)
            
            if (!bootReceiverActivated) {
                android.util.Log.d("MainActivity", "üîß –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ")
                IptablesService.applyRulesFromPrefs(this)
                Toast.makeText(this, "BootReceiver –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª. –ü—Ä–∞–≤–∏–ª–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Ä—É—á–Ω—É—é.\n–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫.", Toast.LENGTH_LONG).show()
            } else if (!serviceRestoreSuccess) {
                android.util.Log.d("MainActivity", "üîß BootReceiver —Å—Ä–∞–±–æ—Ç–∞–ª, –Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
                IptablesService.applyRulesFromPrefs(this)
                Toast.makeText(this, "–ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–∞–≤–∏–ª–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.", Toast.LENGTH_LONG).show()
            } else {
                android.util.Log.d("MainActivity", "‚úÖ –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                Toast.makeText(this, "‚úÖ –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", Toast.LENGTH_SHORT).show()
            }
            
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏", e)
        }
    }
    
    private fun requestNecessaryPermissions() {
        if (permissions.isEmpty()) return
        
        val missingPermissions = permissions.filter { permission ->
            ContextCompat.checkSelfPermission(this, permission) != PackageManager.PERMISSION_GRANTED
        }
        
        if (missingPermissions.isNotEmpty()) {
            android.util.Log.d("MainActivity", "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: $missingPermissions")
            permissionLauncher.launch(missingPermissions.toTypedArray())
        }
    }
    
    private fun handlePermissionResults(results: Map<String, Boolean>) {
        val grantedPermissions = results.filterValues { it }.keys
        val deniedPermissions = results.filterValues { !it }.keys
        
        android.util.Log.d("MainActivity", "–†–∞–∑—Ä–µ—à–µ–Ω—ã: $grantedPermissions")
        android.util.Log.d("MainActivity", "–û—Ç–∫–ª–æ–Ω–µ–Ω—ã: $deniedPermissions")
        
        if (deniedPermissions.isNotEmpty()) {
            val message = buildString {
                append("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã:\n")
                deniedPermissions.forEach { permission ->
                    when (permission) {
                        Manifest.permission.QUERY_ALL_PACKAGES -> 
                            append("‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π\n")
                        Manifest.permission.POST_NOTIFICATIONS -> 
                            append("‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n")
                        Manifest.permission.FOREGROUND_SERVICE_SPECIAL_USE -> 
                            append("‚Ä¢ –§–æ–Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å\n")
                    }
                }
                append("\n–≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏.")
            }
            
            AlertDialog.Builder(this)
                .setTitle("–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
                .setMessage(message)
                .setPositiveButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏") { _, _ ->
                    openAppSettings()
                }
                .setNegativeButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", null)
                .show()
        }
    }
    
    private fun openAppSettings() {
        try {
            val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {
                data = Uri.fromParts("package", packageName, null)
            }
            startActivity(intent)
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", e)
            Toast.makeText(this, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", Toast.LENGTH_SHORT).show()
        }
    }

    private fun setupEdgeToEdge() {
        try {
            // –í–∫–ª—é—á–∞–µ–º edge-to-edge —Ä–µ–∂–∏–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º WindowCompat (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API)
            WindowCompat.setDecorFitsSystemWindows(window, false)

            // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã
            val prefs = getSharedPreferences("proxy_prefs", MODE_PRIVATE)
            val isDarkTheme = prefs.getBoolean("dark_theme", true)

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
                // –î–ª—è API 30+ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π WindowInsetsController
                val insetsController = window.insetsController
                if (isDarkTheme) {
                    insetsController?.setSystemBarsAppearance(0, 
                        android.view.WindowInsetsController.APPEARANCE_LIGHT_STATUS_BARS or
                        android.view.WindowInsetsController.APPEARANCE_LIGHT_NAVIGATION_BARS)
                } else {
                    insetsController?.setSystemBarsAppearance(
                        android.view.WindowInsetsController.APPEARANCE_LIGHT_STATUS_BARS or
                        android.view.WindowInsetsController.APPEARANCE_LIGHT_NAVIGATION_BARS,
                        android.view.WindowInsetsController.APPEARANCE_LIGHT_STATUS_BARS or
                        android.view.WindowInsetsController.APPEARANCE_LIGHT_NAVIGATION_BARS)
                }
            } else {
                // –î–ª—è –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º WindowInsetsControllerCompat
                val windowInsetsController = WindowCompat.getInsetsController(window, window.decorView)
                windowInsetsController.isAppearanceLightStatusBars = !isDarkTheme
                windowInsetsController.isAppearanceLightNavigationBars = !isDarkTheme
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ—Ç—Å—Ç—É–ø–æ–≤
            ViewCompat.setOnApplyWindowInsetsListener(binding.root) { _, insets ->
                // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –±–∞—Ä–æ–≤
                val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
                
                // AppBarLayout –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ—Ä—Ö–Ω–∏–π –æ—Ç—Å—Ç—É–ø –±–ª–∞–≥–æ–¥–∞—Ä—è fitsSystemWindows="true"
                // –ù–∞–º –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–∫–æ–≤—ã–µ –æ—Ç—Å—Ç—É–ø—ã, –Ω–∏–∂–Ω–∏–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è bottom navigation
                binding.root.setPadding(
                    systemBars.left,
                    0, // –í–µ—Ä—Ö–Ω–∏–π –æ—Ç—Å—Ç—É–ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è AppBarLayout
                    systemBars.right,
                    0 // –ù–∏–∂–Ω–∏–π –æ—Ç—Å—Ç—É–ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è BottomNavigation
                )
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è –Ω–∏–∂–Ω–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                val bottomNavigationParams = binding.bottomNavigation.layoutParams as androidx.coordinatorlayout.widget.CoordinatorLayout.LayoutParams
                bottomNavigationParams.bottomMargin = systemBars.bottom
                binding.bottomNavigation.layoutParams = bottomNavigationParams
                
                insets
            }
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ edge-to-edge", e)
        }
    }

    private fun setupViewPager() {
        try {
            viewPagerAdapter = ViewPagerAdapter(this, this)
            binding.viewPager.adapter = viewPagerAdapter
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ViewPager", e)
        }
    }

    private fun setupBottomNavigation() {
        try {
            val bottomNavigation: BottomNavigationView = binding.bottomNavigation
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –≤–∫–ª–∞–¥–∫—É
            bottomNavigation.selectedItemId = R.id.nav_apps
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π
            bottomNavigation.setOnItemSelectedListener { item ->
                when (item.itemId) {
                    R.id.nav_apps -> {
                        binding.viewPager.currentItem = 0
                        true
                    }
                    R.id.nav_rules -> {
                        binding.viewPager.currentItem = 1
                        true
                    }
                    else -> false
                }
            }

            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º ViewPager —Å BottomNavigation
            binding.viewPager.registerOnPageChangeCallback(object : androidx.viewpager2.widget.ViewPager2.OnPageChangeCallback() {
                override fun onPageSelected(position: Int) {
                    super.onPageSelected(position)
                    when (position) {
                        0 -> bottomNavigation.selectedItemId = R.id.nav_apps
                        1 -> bottomNavigation.selectedItemId = R.id.nav_rules
                    }
                }
            })
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ BottomNavigation", e)
        }
    }

    override fun onCreateOptionsMenu(menu: Menu): Boolean {
        return try {
            menuInflater.inflate(R.menu.menu_main, menu)
            menu.findItem(R.id.action_show_system)?.isChecked = showSystemApps
            true
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é", e)
            false
        }
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        return try {
            when (item.itemId) {
                R.id.action_show_system -> {
                    item.isChecked = !item.isChecked
                    showSystemApps = item.isChecked
                    getAppListFragment()?.setShowSystemApps(showSystemApps)
                    true
                }
                R.id.action_select_all -> {
                    getAppListFragment()?.selectAll()
                    true
                }
                R.id.action_deselect_all -> {
                    getAppListFragment()?.deselectAll()
                    true
                }
                R.id.action_settings -> {
                    try {
                        startActivity(Intent(this, SettingsActivity::class.java))
                    } catch (e: Exception) {
                        android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", e)
                        Toast.makeText(this, "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", Toast.LENGTH_SHORT).show()
                    }
                    true
                }
                else -> super.onOptionsItemSelected(item)
            }
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–Ω—é", e)
            false
        }
    }

    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è RulesUpdateListener
    override fun onRulesUpdated() {
        try {
            getAppListFragment()?.refreshSelectedStates()
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª", e)
        }
    }

    private fun getAppListFragment(): AppListFragment? {
        return try {
            supportFragmentManager.findFragmentByTag("f0") as? AppListFragment
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è AppListFragment", e)
            null
        }
    }

    override fun onResume() {
        super.onResume()
        
        try {
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            checkRulesConsistency()
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –≤ onResume", e)
        }
    }

    private fun checkRulesConsistency() {
        try {
            val prefs = getSharedPreferences("proxy_prefs", MODE_PRIVATE)
            val selectedUids = prefs.getStringSet("selected_uids", emptySet()) ?: emptySet()
            val lastConsistencyCheck = prefs.getLong("last_consistency_check", 0)
            val currentTime = System.currentTimeMillis()
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
            if (selectedUids.isNotEmpty() && currentTime - lastConsistencyCheck > 300000) {
                android.util.Log.d("MainActivity", "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª iptables")
                
                prefs.edit()
                    .putLong("last_consistency_check", currentTime)
                    .apply()
            }
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–∞–≤–∏–ª", e)
        }
    }
}
