package dev.rx.app2proxy

import android.content.Intent
import android.content.SharedPreferences
import android.os.Build
import android.os.Bundle
import android.util.Log
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.app.AppCompatDelegate
import androidx.core.view.ViewCompat
import androidx.core.view.WindowCompat
import androidx.core.view.WindowInsetsCompat
import com.google.android.material.appbar.MaterialToolbar
import com.google.android.material.color.DynamicColors
import dev.rx.app2proxy.databinding.ActivitySettingsBinding

class SettingsActivity : AppCompatActivity() {
    private lateinit var binding: ActivitySettingsBinding
    private lateinit var prefs: SharedPreferences
    
    companion object {
        private const val TAG = "SettingsActivity"
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º super.onCreate()
        applySelectedTheme()
        
        super.onCreate(savedInstanceState)
        
        binding = ActivitySettingsBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º edge-to-edge —Ä–µ–∂–∏–º
        setupEdgeToEdge()

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ toolbar
        setupToolbar()

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π
        setupSwitches()
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º AMOLED —Ñ–æ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        applyAmoledThemeIfNeeded()
    }

    private fun applySelectedTheme() {
        prefs = getSharedPreferences("proxy_prefs", MODE_PRIVATE)
        val useMaterialYou = prefs.getBoolean("material_you", false)
        val useAmoledTheme = prefs.getBoolean("amoled_theme", false)
        val isDarkTheme = prefs.getBoolean("dark_theme", true)
        
        Log.d(TAG, "üé® –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –≤ Settings: MaterialYou=$useMaterialYou, AMOLED=$useAmoledTheme, Dark=$isDarkTheme")
        
        // –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º –±–∞–∑–æ–≤—É—é —Ç–µ–º—É
        when {
            useAmoledTheme && isDarkTheme -> setTheme(R.style.Theme_App2Proxy_Amoled)
            else -> setTheme(R.style.Theme_App2Proxy)
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞ Material You —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        if (useMaterialYou && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            if (useAmoledTheme && isDarkTheme) {
                // –î–ª—è AMOLED —Ç–µ–º—ã —Å Material You –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
                Log.d(TAG, "üé® –ü—Ä–∏–º–µ–Ω—è–µ–º AMOLED + Material You")
                AmoledDynamicColorScheme.applyAmoledDynamicColors(this)
            } else {
                // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º Material You —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ
                Log.d(TAG, "üé® –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Material You")
                DynamicColors.applyToActivityIfAvailable(this)
            }
        }
    }
    
    private fun applyAmoledThemeIfNeeded() {
        val useAmoledTheme = prefs.getBoolean("amoled_theme", false)
        val isDarkTheme = prefs.getBoolean("dark_theme", true)
        
        if (useAmoledTheme && isDarkTheme) {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —á–µ—Ä–Ω—ã–π —Ñ–æ–Ω —Ç–æ–ª—å–∫–æ –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
            AmoledDynamicColorScheme.applyAmoledBackgroundToView(binding.root)
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º AMOLED —Å—Ç–∏–ª—å –∫ Toolbar
            AmoledDynamicColorScheme.applyAmoledToolbarStyle(binding.toolbar, this)
            
            Log.d(TAG, "‚úÖ AMOLED —Å—Ç–∏–ª—å –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ Settings (–≤–∫–ª—é—á–∞—è Toolbar)")
        }
    }

    override fun onResume() {
        super.onResume()
        
        // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º AMOLED —Å—Ç–∏–ª—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        applyAmoledThemeIfNeeded()
    }

    private fun setupToolbar() {
        try {
            val toolbar: MaterialToolbar = binding.toolbar
            setSupportActionBar(toolbar)
            supportActionBar?.apply {
                title = getString(R.string.action_settings)
                setDisplayHomeAsUpEnabled(true)
                setDisplayShowTitleEnabled(true)
            }
            Log.d(TAG, "‚úÖ Toolbar –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ toolbar", e)
        }
    }

    private fun setupSwitches() {
        // –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫
        binding.switchAutostart.isChecked = prefs.getBoolean("autostart", false)
        binding.switchAutostart.setOnCheckedChangeListener { _, isChecked ->
            prefs.edit().putBoolean("autostart", isChecked).apply()
            Log.d(TAG, "–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ ${if (isChecked) "–≤–∫–ª—é—á–µ–Ω" else "–æ—Ç–∫–ª—é—á–µ–Ω"}")
        }

        // –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
        binding.switchTheme.isChecked = prefs.getBoolean("dark_theme", true)
        binding.switchTheme.setOnCheckedChangeListener { _, isChecked ->
            prefs.edit().putBoolean("dark_theme", isChecked).apply()
            AppCompatDelegate.setDefaultNightMode(
                if (isChecked) AppCompatDelegate.MODE_NIGHT_YES else AppCompatDelegate.MODE_NIGHT_NO
            )
            
            Log.d(TAG, "–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${if (isChecked) "—Ç–µ–º–Ω—É—é" else "—Å–≤–µ—Ç–ª—É—é"}")
            
            // –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞, –æ—Ç–∫–ª—é—á–∞–µ–º AMOLED
            if (!isChecked && binding.switchAmoledTheme.isChecked) {
                binding.switchAmoledTheme.isChecked = false
                prefs.edit().putBoolean("amoled_theme", false).apply()
                Log.d(TAG, "AMOLED —Ç–µ–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É")
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AMOLED –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
            updateAmoledSwitchState()
            
            // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
            restartActivity()
        }

        // Material You
        binding.switchMaterialYou.isEnabled = Build.VERSION.SDK_INT >= Build.VERSION_CODES.S
        binding.switchMaterialYou.isChecked = prefs.getBoolean("material_you", false)
        binding.switchMaterialYou.setOnCheckedChangeListener { _, isChecked ->
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                prefs.edit().putBoolean("material_you", isChecked).apply()
                
                Log.d(TAG, "Material You ${if (isChecked) "–≤–∫–ª—é—á–µ–Ω" else "–æ—Ç–∫–ª—é—á–µ–Ω"}")

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                val message = if (isChecked) {
                    if (prefs.getBoolean("amoled_theme", false)) {
                        "Material You –≤–∫–ª—é—á–µ–Ω –¥–ª—è AMOLED —Ç–µ–º—ã.\n–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞ –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞,\n—Ñ–æ–Ω –∏ AppBar –æ—Å—Ç–∞–Ω—É—Ç—Å—è —á–µ—Ä–Ω—ã–º–∏."
                    } else {
                        "Material You –≤–∫–ª—é—á–µ–Ω"
                    }
                } else {
                    "Material You –æ—Ç–∫–ª—é—á–µ–Ω"
                }
                
                Toast.makeText(this, message, Toast.LENGTH_LONG).show()

                // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π —Å—Ç–µ–∫–∞
                val intent = Intent(this, MainActivity::class.java)
                intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
                startActivity(intent)
                finish()
            } else {
                binding.switchMaterialYou.isChecked = false
                Toast.makeText(this, "Material You –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ Android", Toast.LENGTH_SHORT).show()
                Log.w(TAG, "–ü–æ–ø—ã—Ç–∫–∞ –≤–∫–ª—é—á–∏—Ç—å Material You –Ω–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π –≤–µ—Ä—Å–∏–∏ Android")
            }
        }

        // AMOLED —Ç–µ–º–∞
        binding.switchAmoledTheme.isChecked = prefs.getBoolean("amoled_theme", false)
        binding.switchAmoledTheme.setOnCheckedChangeListener { _, isChecked ->
            if (isChecked && !binding.switchTheme.isChecked) {
                // –ï—Å–ª–∏ –ø—ã—Ç–∞—é—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å AMOLED –±–µ–∑ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
                binding.switchAmoledTheme.isChecked = false
                Toast.makeText(this, "AMOLED —Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ", Toast.LENGTH_SHORT).show()
                Log.w(TAG, "–ü–æ–ø—ã—Ç–∫–∞ –≤–∫–ª—é—á–∏—Ç—å AMOLED —Ç–µ–º—É –±–µ–∑ —Ç–µ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
                return@setOnCheckedChangeListener
            }
            
            prefs.edit().putBoolean("amoled_theme", isChecked).apply()
            
            val message = if (isChecked) {
                if (prefs.getBoolean("material_you", false)) {
                    "AMOLED —Ç–µ–º–∞ –≤–∫–ª—é—á–µ–Ω–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Material You.\n–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞,\n—Ñ–æ–Ω –∏ AppBar –æ—Å—Ç–∞–Ω—É—Ç—Å—è —á–µ—Ä–Ω—ã–º–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –±–∞—Ç–∞—Ä–µ–∏."
                } else {
                    "AMOLED —Ç–µ–º–∞ –≤–∫–ª—é—á–µ–Ω–∞.\n–§–æ–Ω –∏ AppBar —Å—Ç–∞–Ω—É—Ç —á–µ—Ä–Ω—ã–º–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –±–∞—Ç–∞—Ä–µ–∏."
                }
            } else {
                "AMOLED —Ç–µ–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞"
            }
            
            Log.d(TAG, message)
            Toast.makeText(this, message, Toast.LENGTH_LONG).show()
            
            // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ Material You
            val intent = Intent(this, MainActivity::class.java)
            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
            startActivity(intent)
            finish()
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ AMOLED –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
        updateAmoledSwitchState()
    }

    private fun updateAmoledSwitchState() {
        val isDarkTheme = binding.switchTheme.isChecked
        binding.switchAmoledTheme.isEnabled = isDarkTheme
        
        if (!isDarkTheme && binding.switchAmoledTheme.isChecked) {
            binding.switchAmoledTheme.isChecked = false
            prefs.edit().putBoolean("amoled_theme", false).apply()
            Log.d(TAG, "AMOLED –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω –∏ —Å–±—Ä–æ—à–µ–Ω –∏–∑-–∑–∞ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã")
        }
    }

    private fun restartActivity() {
        Log.d(TAG, "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Settings –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã")
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
        val intent = intent
        finish()
        startActivity(intent)
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
            // Android 14+ (API 34+) - –Ω–æ–≤—ã–π API
            overrideActivityTransition(
                OVERRIDE_TRANSITION_CLOSE,
                android.R.anim.fade_in,
                android.R.anim.fade_out
            )
        } else {
            // –°—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ Android - —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –Ω–æ —Ä–∞–±–æ—á–∏–π API
            @Suppress("DEPRECATION")
            overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)
        }
    }

    private fun setupEdgeToEdge() {
        try {
            // –í–∫–ª—é—á–∞–µ–º edge-to-edge —Ä–µ–∂–∏–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º WindowCompat (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API)
            WindowCompat.setDecorFitsSystemWindows(window, false)

            // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã
            val isDarkTheme = prefs.getBoolean("dark_theme", true)

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
                // –î–ª—è API 30+ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π WindowInsetsController
                val insetsController = window.insetsController
                if (isDarkTheme) {
                    insetsController?.setSystemBarsAppearance(0, 
                        android.view.WindowInsetsController.APPEARANCE_LIGHT_STATUS_BARS or
                        android.view.WindowInsetsController.APPEARANCE_LIGHT_NAVIGATION_BARS)
                } else {
                    insetsController?.setSystemBarsAppearance(
                        android.view.WindowInsetsController.APPEARANCE_LIGHT_STATUS_BARS or
                        android.view.WindowInsetsController.APPEARANCE_LIGHT_NAVIGATION_BARS,
                        android.view.WindowInsetsController.APPEARANCE_LIGHT_STATUS_BARS or
                        android.view.WindowInsetsController.APPEARANCE_LIGHT_NAVIGATION_BARS)
                }
            } else {
                // –î–ª—è –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–ª–∞–≥–∏
                val flags = if (isDarkTheme) {
                    0 // –°–≤–µ—Ç–ª—ã–µ –∏–∫–æ–Ω–∫–∏ –Ω–∞ —Ç–µ–º–Ω–æ–º —Ñ–æ–Ω–µ
                } else {
                    // –¢–µ–º–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –Ω–∞ —Å–≤–µ—Ç–ª–æ–º —Ñ–æ–Ω–µ
                    @Suppress("DEPRECATION")
                    android.view.View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR or 
                    @Suppress("DEPRECATION")
                    android.view.View.SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR
                }
                @Suppress("DEPRECATION")
                window.decorView.systemUiVisibility = flags
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö UI
            ViewCompat.setOnApplyWindowInsetsListener(binding.root) { view, insets ->
                val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
                view.setPadding(systemBars.left, 0, systemBars.right, systemBars.bottom)
                insets
            }
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ edge-to-edge", e)
        }
    }

    override fun onSupportNavigateUp(): Boolean {
        finish()
        return true
    }
}
