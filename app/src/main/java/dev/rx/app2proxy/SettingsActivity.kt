package dev.rx.app2proxy

import android.content.Intent
import android.content.SharedPreferences
import android.os.Build
import android.os.Bundle
import android.util.Log
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.app.AppCompatDelegate
import androidx.core.view.ViewCompat
import androidx.core.view.WindowCompat
import androidx.core.view.WindowInsetsCompat
import com.google.android.material.appbar.MaterialToolbar
import com.google.android.material.color.DynamicColors
import dev.rx.app2proxy.databinding.ActivitySettingsBinding

class SettingsActivity : AppCompatActivity() {
    private lateinit var binding: ActivitySettingsBinding
    private lateinit var prefs: SharedPreferences
    
    companion object {
        private const val TAG = "SettingsActivity"
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º super.onCreate()
        applySelectedTheme()
        
        super.onCreate(savedInstanceState)
        
        binding = ActivitySettingsBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º edge-to-edge —Ä–µ–∂–∏–º
        setupEdgeToEdge()

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ toolbar
        val toolbar: MaterialToolbar = binding.toolbar
        setSupportActionBar(toolbar)
        supportActionBar?.apply {
            title = getString(R.string.action_settings)
            setDisplayHomeAsUpEnabled(true)
            setDisplayShowTitleEnabled(true)
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π
        setupSwitches()
    }

    private fun applySelectedTheme() {
        prefs = getSharedPreferences("proxy_prefs", MODE_PRIVATE)
        val useMaterialYou = prefs.getBoolean("material_you", false)
        val useAmoledTheme = prefs.getBoolean("amoled_theme", false)
        val isDarkTheme = prefs.getBoolean("dark_theme", true)
        
        Log.d(TAG, "üé® –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –≤ Settings: MaterialYou=$useMaterialYou, AMOLED=$useAmoledTheme, Dark=$isDarkTheme")
        
        // –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º –±–∞–∑–æ–≤—É—é —Ç–µ–º—É
        when {
            useAmoledTheme && isDarkTheme -> {
                setTheme(R.style.Theme_App2Proxy_Amoled)
                Log.d(TAG, "‚úÖ AMOLED —Ç–µ–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –≤ Settings")
            }
            else -> {
                setTheme(R.style.Theme_App2Proxy)
                Log.d(TAG, "‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–µ–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –≤ Settings")
            }
        }
        
        // –ó–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º Material You –ø–æ–≤–µ—Ä—Ö –±–∞–∑–æ–≤–æ–π —Ç–µ–º—ã, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if (useMaterialYou && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            try {
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞
                DynamicColors.applyToActivityIfAvailable(this)
                Log.d(TAG, "‚úÖ Material You –ø—Ä–∏–º–µ–Ω–µ–Ω –≤ Settings")
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è Material You –≤ Settings", e)
            }
        }
    }

    private fun setupSwitches() {
        // –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫
        binding.switchAutostart.isChecked = prefs.getBoolean("autostart", false)
        binding.switchAutostart.setOnCheckedChangeListener { _, isChecked ->
            prefs.edit().putBoolean("autostart", isChecked).apply()
            Log.d(TAG, "–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ ${if (isChecked) "–≤–∫–ª—é—á–µ–Ω" else "–æ—Ç–∫–ª—é—á–µ–Ω"}")
        }

        // –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
        binding.switchTheme.isChecked = prefs.getBoolean("dark_theme", true)
        binding.switchTheme.setOnCheckedChangeListener { _, isChecked ->
            prefs.edit().putBoolean("dark_theme", isChecked).apply()
            AppCompatDelegate.setDefaultNightMode(
                if (isChecked) AppCompatDelegate.MODE_NIGHT_YES else AppCompatDelegate.MODE_NIGHT_NO
            )
            
            Log.d(TAG, "–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${if (isChecked) "—Ç–µ–º–Ω—É—é" else "—Å–≤–µ—Ç–ª—É—é"}")
            
            // –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞, –æ—Ç–∫–ª—é—á–∞–µ–º AMOLED
            if (!isChecked && binding.switchAmoledTheme.isChecked) {
                binding.switchAmoledTheme.isChecked = false
                prefs.edit().putBoolean("amoled_theme", false).apply()
                Log.d(TAG, "AMOLED —Ç–µ–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É")
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AMOLED –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
            updateAmoledSwitchState()
            
            // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
            restartActivity()
        }

        // Material You
        binding.switchMaterialYou.isEnabled = Build.VERSION.SDK_INT >= Build.VERSION_CODES.S
        binding.switchMaterialYou.isChecked = prefs.getBoolean("material_you", false)
        binding.switchMaterialYou.setOnCheckedChangeListener { _, isChecked ->
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                prefs.edit().putBoolean("material_you", isChecked).apply()
                
                Log.d(TAG, "Material You ${if (isChecked) "–≤–∫–ª—é—á–µ–Ω" else "–æ—Ç–∫–ª—é—á–µ–Ω"}")

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                Toast.makeText(this, 
                    if (isChecked) "Material You –≤–∫–ª—é—á–µ–Ω" else "Material You –æ—Ç–∫–ª—é—á–µ–Ω", 
                    Toast.LENGTH_SHORT).show()

                // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π —Å—Ç–µ–∫–∞
                val intent = Intent(this, MainActivity::class.java)
                intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
                startActivity(intent)
                finish()
            } else {
                binding.switchMaterialYou.isChecked = false
                Toast.makeText(this, "Material You –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ Android", Toast.LENGTH_SHORT).show()
                Log.w(TAG, "–ü–æ–ø—ã—Ç–∫–∞ –≤–∫–ª—é—á–∏—Ç—å Material You –Ω–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π –≤–µ—Ä—Å–∏–∏ Android")
            }
        }

        // AMOLED —Ç–µ–º–∞
        binding.switchAmoledTheme.isChecked = prefs.getBoolean("amoled_theme", false)
        binding.switchAmoledTheme.setOnCheckedChangeListener { _, isChecked ->
            if (isChecked && !binding.switchTheme.isChecked) {
                // –ï—Å–ª–∏ –ø—ã—Ç–∞—é—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å AMOLED –±–µ–∑ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
                binding.switchAmoledTheme.isChecked = false
                Toast.makeText(this, "AMOLED —Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ", Toast.LENGTH_SHORT).show()
                Log.w(TAG, "–ü–æ–ø—ã—Ç–∫–∞ –≤–∫–ª—é—á–∏—Ç—å AMOLED —Ç–µ–º—É –±–µ–∑ —Ç–µ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
                return@setOnCheckedChangeListener
            }
            
            prefs.edit().putBoolean("amoled_theme", isChecked).apply()
            Log.d(TAG, "AMOLED —Ç–µ–º–∞ ${if (isChecked) "–≤–∫–ª—é—á–µ–Ω–∞" else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"}")
            
            // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ Material You
            val intent = Intent(this, MainActivity::class.java)
            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
            startActivity(intent)
            finish()
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ AMOLED –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
        updateAmoledSwitchState()
    }

    private fun updateAmoledSwitchState() {
        val isDarkTheme = binding.switchTheme.isChecked
        binding.switchAmoledTheme.isEnabled = isDarkTheme
        
        if (!isDarkTheme && binding.switchAmoledTheme.isChecked) {
            binding.switchAmoledTheme.isChecked = false
            prefs.edit().putBoolean("amoled_theme", false).apply()
            Log.d(TAG, "AMOLED –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω –∏ —Å–±—Ä–æ—à–µ–Ω –∏–∑-–∑–∞ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã")
        }
    }

    private fun restartActivity() {
        Log.d(TAG, "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Settings –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã")
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
        val intent = intent
        finish()
        startActivity(intent)
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
            // Android 14+ (API 34+) - –Ω–æ–≤—ã–π API
            overrideActivityTransition(
                OVERRIDE_TRANSITION_CLOSE,
                android.R.anim.fade_in,
                android.R.anim.fade_out
            )
        } else {
            // –°—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ Android - —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –Ω–æ —Ä–∞–±–æ—á–∏–π API
            @Suppress("DEPRECATION")
            overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)
        }
    }

    private fun setupEdgeToEdge() {
        try {
            // –í–∫–ª—é—á–∞–µ–º edge-to-edge —Ä–µ–∂–∏–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º WindowCompat (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API)
            WindowCompat.setDecorFitsSystemWindows(window, false)

            // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã
            val isDarkTheme = prefs.getBoolean("dark_theme", true)

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
                // –î–ª—è API 30+ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π WindowInsetsController
                val insetsController = window.insetsController
                if (isDarkTheme) {
                    insetsController?.setSystemBarsAppearance(0, 
                        android.view.WindowInsetsController.APPEARANCE_LIGHT_STATUS_BARS or
                        android.view.WindowInsetsController.APPEARANCE_LIGHT_NAVIGATION_BARS)
                } else {
                    insetsController?.setSystemBarsAppearance(
                        android.view.WindowInsetsController.APPEARANCE_LIGHT_STATUS_BARS or
                        android.view.WindowInsetsController.APPEARANCE_LIGHT_NAVIGATION_BARS,
                        android.view.WindowInsetsController.APPEARANCE_LIGHT_STATUS_BARS or
                        android.view.WindowInsetsController.APPEARANCE_LIGHT_NAVIGATION_BARS)
                }
            } else {
                // –î–ª—è –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º WindowInsetsControllerCompat
                val windowInsetsController = WindowCompat.getInsetsController(window, window.decorView)
                windowInsetsController.isAppearanceLightStatusBars = !isDarkTheme
                windowInsetsController.isAppearanceLightNavigationBars = !isDarkTheme
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ—Ç—Å—Ç—É–ø–æ–≤
            ViewCompat.setOnApplyWindowInsetsListener(binding.root) { _, insets ->
                // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –±–∞—Ä–æ–≤
                val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
                
                // AppBarLayout –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ—Ä—Ö–Ω–∏–π –æ—Ç—Å—Ç—É–ø –±–ª–∞–≥–æ–¥–∞—Ä—è fitsSystemWindows="true"
                // –ù–∞–º –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–∫–æ–≤—ã–µ –æ—Ç—Å—Ç—É–ø—ã, –Ω–∏–∂–Ω–∏–π –æ—Ç—Å—Ç—É–ø —Ç–æ–∂–µ –ø—Ä–∏–º–µ–Ω—è–µ–º
                binding.root.setPadding(
                    systemBars.left,
                    0, // –í–µ—Ä—Ö–Ω–∏–π –æ—Ç—Å—Ç—É–ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è AppBarLayout
                    systemBars.right,
                    systemBars.bottom // –ù–∏–∂–Ω–∏–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
                )
                
                insets
            }
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ edge-to-edge —Ä–µ–∂–∏–º–∞", e)
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø–æ–¥—Ö–æ–¥
            ViewCompat.setOnApplyWindowInsetsListener(binding.root) { view, insets ->
                val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
                view.setPadding(systemBars.left, 0, systemBars.right, systemBars.bottom)
                insets
            }
        }
    }

    override fun onSupportNavigateUp(): Boolean {
        finish()
        return true
    }
}
