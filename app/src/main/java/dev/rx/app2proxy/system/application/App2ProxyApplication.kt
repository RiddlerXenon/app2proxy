package dev.rx.app2proxy

import android.app.Application
import android.content.Context
import android.os.Build
import android.util.Log
import androidx.appcompat.app.AppCompatDelegate
import com.google.android.material.color.DynamicColors

class App2ProxyApplication : Application() {
    
    companion object {
        private const val TAG = "App2ProxyApplication"
    }
    
    override fun onCreate() {
        super.onCreate()
        
        Log.d(TAG, "üöÄ –ó–∞–ø—É—Å–∫ App2Proxy Application")
        Log.d(TAG, "üì± Android –≤–µ—Ä—Å–∏—è: ${Build.VERSION.RELEASE} (API ${Build.VERSION.SDK_INT})")
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            if (isDeviceProtectedStorageAvailable()) {
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                initializeAppSettings()
                
                // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
                applyTheme()
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Material You
                initializeMaterialYou()
                
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π Android
                when {
                    Build.VERSION.SDK_INT >= Build.VERSION_CODES.VANILLA_ICE_CREAM -> {
                        initializeAndroid15Compatibility()
                        Log.d(TAG, "‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Android 15 –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                    }
                    Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE -> {
                        initializeAndroid14Compatibility()
                        Log.d(TAG, "‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Android 14 –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                    }
                    else -> {
                        Log.d(TAG, "‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                    }
                }
                
                Log.d(TAG, "‚úÖ App2Proxy Application —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            } else {
                Log.w(TAG, "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM)
                Log.d(TAG, "‚úÖ –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", e)
            // Fallback –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            try {
                AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM)
                Log.d(TAG, "‚úÖ Fallback –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            } catch (fallbackError: Exception) {
                Log.e(TAG, "‚ùå Fallback –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å", fallbackError)
            }
        }
    }
    
    private fun isDeviceProtectedStorageAvailable(): Boolean {
        return try {
            // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ SharedPreferences
            getSharedPreferences("test_prefs", MODE_PRIVATE)
            true
        } catch (e: IllegalStateException) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
            false
        } catch (e: Exception) {
            Log.e(TAG, "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞", e)
            false
        }
    }
    
    private fun applyTheme() {
        try {
            val prefs = getSharedPreferences("proxy_prefs", MODE_PRIVATE)
            val isDarkTheme = prefs.getBoolean("dark_theme", true)
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ç–µ–º—É
            AppCompatDelegate.setDefaultNightMode(
                if (isDarkTheme) AppCompatDelegate.MODE_NIGHT_YES else AppCompatDelegate.MODE_NIGHT_NO
            )
            
            Log.d(TAG, "‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ç–µ–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞: ${if (isDarkTheme) "–¢–µ–º–Ω–∞—è" else "–°–≤–µ—Ç–ª–∞—è"}")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ç–µ–º—ã", e)
            // Fallback –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º–µ
            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM)
        }
    }
    
    private fun initializeAppSettings() {
        try {
            val prefs = getSharedPreferences("proxy_prefs", MODE_PRIVATE)
            val isFirstLaunch = !prefs.getBoolean("app_initialized", false)
            
            if (isFirstLaunch) {
                Log.d(TAG, "üéâ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                
                prefs.edit()
                    .putBoolean("autostart", false)
                    .putBoolean("dark_theme", true)
                    .putBoolean("amoled_theme", false) // –ù–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ AMOLED —Ç–µ–º—ã
                    .putBoolean("app_initialized", true)
                    .putLong("first_launch_time", System.currentTimeMillis())
                    .putBoolean("material_you", Build.VERSION.SDK_INT >= Build.VERSION_CODES.S)
                    .apply()
                Log.d(TAG, "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–µ—Ä–≤–∏—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            } else {
                Log.d(TAG, "‚ÑπÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ä–∞–Ω–µ–µ")
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", e)
        }
    }
    
    private fun initializeMaterialYou() {
        try {
            val prefs = getSharedPreferences("proxy_prefs", MODE_PRIVATE)
            val useMaterialYou = prefs.getBoolean("material_you", false)
            
            if (useMaterialYou && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞ –∫–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                DynamicColors.applyToActivitiesIfAvailable(this)
                Log.d(TAG, "‚úÖ Material You –≤–∫–ª—é—á–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π")
            } else if (Build.VERSION.SDK_INT < Build.VERSION_CODES.S) {
                Log.d(TAG, "‚ÑπÔ∏è Material You –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ Android ${Build.VERSION.RELEASE}")
            } else {
                Log.d(TAG, "‚ÑπÔ∏è Material You –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Material You", e)
        }
    }
    
    private fun initializeAndroid15Compatibility() {
        try {
            Log.d(TAG, "üî• –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è Android 15")
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Android 15
            val prefs = getSharedPreferences("proxy_prefs", MODE_PRIVATE)
            prefs.edit()
                .putBoolean("android_15_mode", true)
                .putBoolean("enhanced_boot_receiver", true)
                .putBoolean("aggressive_service_start", true)
                .apply()
                
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Android 15", e)
        }
    }
    
    private fun initializeAndroid14Compatibility() {
        try {
            Log.d(TAG, "üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Android 14")
            
            val prefs = getSharedPreferences("proxy_prefs", MODE_PRIVATE)
            prefs.edit()
                .putBoolean("android_14_mode", true)
                .putBoolean("foreground_service_special_use", true)
                .apply()
                
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Android 14", e)
        }
    }
}
