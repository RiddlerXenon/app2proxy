package dev.rx.app2proxy

import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.os.Build
import android.os.Handler
import android.os.Looper
import android.util.Log
import kotlinx.coroutines.*
import java.io.File

class BootReceiver : BroadcastReceiver() {
    
    companion object {
        private const val TAG = "App2ProxyBootReceiver"
        private const val DEFAULT_PROXY_PORT = 12345
        private const val DEFAULT_DNS_PORT = 10853
    }
    
    override fun onReceive(context: Context, intent: Intent) {
        val timestamp = System.currentTimeMillis()
        val action = intent.action ?: "null"
        
        Log.d(TAG, "=== BootReceiver –ê–ö–¢–ò–í–ò–†–û–í–ê–ù ===")
        Log.d(TAG, "Action: $action")
        Log.d(TAG, "Android –≤–µ—Ä—Å–∏—è: ${Build.VERSION.RELEASE} (API ${Build.VERSION.SDK_INT})")
        Log.d(TAG, "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: ${Build.MANUFACTURER}")
        Log.d(TAG, "–ú–æ–¥–µ–ª—å: ${Build.MODEL}")
        Log.d(TAG, "–í—Ä–µ–º—è: $timestamp")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–±—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        if (!isBootEvent(action)) {
            Log.d(TAG, "–°–æ–±—ã—Ç–∏–µ $action –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
            return
        }
        
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º LOCKED_BOOT_COMPLETED –¥–ª—è Android 15, —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å BOOT_COMPLETED
        if (action == Intent.ACTION_LOCKED_BOOT_COMPLETED) {
            Log.d(TAG, "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º LOCKED_BOOT_COMPLETED, –∂–¥–µ–º BOOT_COMPLETED")
            return
        }
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SharedPreferences
            if (!isUserUnlocked(context)) {
                Log.w(TAG, "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
                return
            }
            
            // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            val prefs = context.getSharedPreferences("proxy_prefs", Context.MODE_PRIVATE)
            prefs.edit()
                .putBoolean("boot_receiver_activated", true)
                .putLong("last_boot_receiver_time", timestamp)
                .putString("last_boot_action", action)
                .putString("boot_android_version", "${Build.VERSION.RELEASE} (API ${Build.VERSION.SDK_INT})")
                .putString("boot_device_info", "${Build.MANUFACTURER} ${Build.MODEL}")
                .apply()
            
            writeToLogFile(context, "BOOT_EVENT_RECEIVED: action=$action, android=${Build.VERSION.SDK_INT}, time=$timestamp")
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Android 15
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.VANILLA_ICE_CREAM) {
                Log.d(TAG, "üî• Android 15+ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É")
                handleAndroid15BootEvent(context, action, timestamp)
            } else {
                Log.d(TAG, "üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è Android ${Build.VERSION.SDK_INT}")
                handleStandardBootEvent(context, action, timestamp)
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ onReceive", e)
            writeToLogFile(context, "BOOT_RECEIVER_ERROR: ${e.message}")
        }
    }
    
    private fun isUserUnlocked(context: Context): Boolean {
        return try {
            // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ SharedPreferences
            context.getSharedPreferences("test_prefs", Context.MODE_PRIVATE)
            true
        } catch (e: IllegalStateException) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
            false
        } catch (e: Exception) {
            Log.e(TAG, "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", e)
            false
        }
    }
    
    private fun isBootEvent(action: String): Boolean {
        return when (action) {
            Intent.ACTION_BOOT_COMPLETED,
            Intent.ACTION_LOCKED_BOOT_COMPLETED,
            Intent.ACTION_USER_PRESENT,
            Intent.ACTION_USER_UNLOCKED,
            Intent.ACTION_MY_PACKAGE_REPLACED,
            Intent.ACTION_PACKAGE_REPLACED,
            "android.intent.action.QUICKBOOT_POWERON",
            "com.htc.intent.action.QUICKBOOT_POWERON",
            "miui.intent.action.MIUI_APPLICATION_START" -> true
            else -> false
        }
    }
    
    private fun handleAndroid15BootEvent(context: Context, action: String, timestamp: Long) {
        try {
            Log.d(TAG, "üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è Android 15+")
            
            val prefs = context.getSharedPreferences("proxy_prefs", Context.MODE_PRIVATE)
            prefs.edit()
                .putBoolean("android_15_boot_handled", true)
                .apply()
            
            writeToLogFile(context, "ANDROID_15_BOOT_EVENT: action=$action, time=$timestamp")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            if (!checkBootPermissions(context)) {
                Log.e(TAG, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è Android 15")
                writeToLogFile(context, "ANDROID_15_PERMISSION_ERROR")
                return
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Android 15
            startAndroid15Restoration(context, action)
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Android 15", e)
            writeToLogFile(context, "ANDROID_15_ERROR: ${e.message}")
        }
    }
    
    private fun handleStandardBootEvent(context: Context, action: String, timestamp: Long) {
        try {
            Log.d(TAG, "üì± –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è")
            
            writeToLogFile(context, "STANDARD_BOOT_EVENT: action=$action, time=$timestamp")
            
            startStandardRestoration(context, action)
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏", e)
            writeToLogFile(context, "STANDARD_ERROR: ${e.message}")
        }
    }
    
    private fun checkBootPermissions(context: Context): Boolean {
        try {
            val packageManager = context.packageManager
            val packageName = context.packageName
            
            val hasBootPermission = packageManager.checkPermission(
                android.Manifest.permission.RECEIVE_BOOT_COMPLETED,
                packageName
            ) == android.content.pm.PackageManager.PERMISSION_GRANTED
            
            val hasForegroundService = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
                packageManager.checkPermission(
                    android.Manifest.permission.FOREGROUND_SERVICE_SPECIAL_USE,
                    packageName
                ) == android.content.pm.PackageManager.PERMISSION_GRANTED
            } else true
            
            Log.d(TAG, "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ BOOT_COMPLETED: $hasBootPermission")
            Log.d(TAG, "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ FOREGROUND_SERVICE_SPECIAL_USE: $hasForegroundService")
            
            return hasBootPermission && hasForegroundService
            
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π", e)
            return false
        }
    }
    
    private fun startAndroid15Restoration(context: Context, action: String) {
        Log.d(TAG, "üî• –ó–∞–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è Android 15")
        
        val prefs = context.getSharedPreferences("proxy_prefs", Context.MODE_PRIVATE)
        val selectedUids = prefs.getStringSet("selected_uids", emptySet()) ?: emptySet()
        
        if (selectedUids.isEmpty()) {
            Log.d(TAG, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤–∏–ª –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
            writeToLogFile(context, "ANDROID_15_NO_RULES")
            return
        }
        
        Log.d(TAG, "üìã –ù–∞–π–¥–µ–Ω–æ ${selectedUids.size} –ø—Ä–∞–≤–∏–ª –¥–ª—è Android 15")
        writeToLogFile(context, "ANDROID_15_RULES_FOUND: count=${selectedUids.size}, uids=${selectedUids.joinToString(",")}")
        
        // –ú–µ—Ç–æ–¥ 1: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ foreground service
        var serviceStarted = false
        try {
            val serviceIntent = Intent(context, AutoStartService::class.java).apply {
                putExtra("event_type", "ANDROID_15_$action")
                putExtra("uid_count", selectedUids.size)
                putExtra("android_version", Build.VERSION.SDK_INT)
            }
            
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                context.startForegroundService(serviceIntent)
            } else {
                context.startService(serviceIntent)
            }
            
            serviceStarted = true
            Log.d(TAG, "‚úÖ Service –∑–∞–ø—É—â–µ–Ω –¥–ª—è Android 15")
            writeToLogFile(context, "ANDROID_15_SERVICE_STARTED")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ service –¥–ª—è Android 15", e)
            writeToLogFile(context, "ANDROID_15_SERVICE_ERROR: ${e.message}")
        }
        
        // –ú–µ—Ç–æ–¥ 2: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π fallback –¥–ª—è Android 15
        if (!serviceStarted || action == Intent.ACTION_USER_PRESENT) {
            startAndroid15Fallback(context, selectedUids)
        }
    }
    
    private fun startAndroid15Fallback(context: Context, selectedUids: Set<String>) {
        Log.d(TAG, "üîß Android 15 fallback –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ")
        writeToLogFile(context, "ANDROID_15_FALLBACK_STARTED")
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è Android 15
        Handler(Looper.getMainLooper()).postDelayed({
            CoroutineScope(Dispatchers.IO).launch {
                try {
                    Log.d(TAG, "üéØ –ü—Ä—è–º–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –¥–ª—è Android 15")
                    
                    val uidsString = selectedUids.joinToString(" ")
                    val result = applyRulesDirectlyAndroid15(context, uidsString)
                    
                    Log.d(TAG, "üìù –†–µ–∑—É–ª—å—Ç–∞—Ç Android 15: $result")
                    writeToLogFile(context, "ANDROID_15_RESULT: $result")
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    val prefs = context.getSharedPreferences("proxy_prefs", Context.MODE_PRIVATE)
                    prefs.edit()
                        .putLong("last_android_15_restore", System.currentTimeMillis())
                        .putString("android_15_result", result)
                        .putBoolean("android_15_success", result.contains("Applied") || result.contains("–ø—Ä–∏–º–µ–Ω–µ–Ω—ã"))
                        .apply()
                    
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ Android 15 fallback", e)
                    writeToLogFile(context, "ANDROID_15_FALLBACK_ERROR: ${e.message}")
                }
            }
        }, 3000) // –£–º–µ–Ω—å—à–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–æ 3 —Å–µ–∫—É–Ω–¥
    }
    
    private fun startStandardRestoration(context: Context, action: String) {
        Log.d(TAG, "üì± –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ")
        
        val prefs = context.getSharedPreferences("proxy_prefs", Context.MODE_PRIVATE)
        val selectedUids = prefs.getStringSet("selected_uids", emptySet()) ?: emptySet()
        
        if (selectedUids.isEmpty()) {
            Log.d(TAG, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤–∏–ª –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
            writeToLogFile(context, "STANDARD_NO_RULES")
            return
        }
        
        Log.d(TAG, "üìã –ù–∞–π–¥–µ–Ω–æ ${selectedUids.size} –ø—Ä–∞–≤–∏–ª –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
        writeToLogFile(context, "STANDARD_RULES_FOUND: count=${selectedUids.size}, uids=${selectedUids.joinToString(",")}")
        
        // –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ service
        try {
            val serviceIntent = Intent(context, AutoStartService::class.java).apply {
                putExtra("event_type", action)
                putExtra("uid_count", selectedUids.size)
            }
            
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                context.startForegroundService(serviceIntent)
            } else {
                context.startService(serviceIntent)
            }
            
            Log.d(TAG, "‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π service –∑–∞–ø—É—â–µ–Ω")
            writeToLogFile(context, "STANDARD_SERVICE_STARTED")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ service", e)
            writeToLogFile(context, "STANDARD_SERVICE_ERROR: ${e.message}")
            
            // Fallback
            Handler(Looper.getMainLooper()).postDelayed({
                CoroutineScope(Dispatchers.IO).launch {
                    try {
                        val uidsString = selectedUids.joinToString(" ")
                        val result = applyRulesDirectlyStandard(context, uidsString)
                        writeToLogFile(context, "STANDARD_FALLBACK_RESULT: $result")
                    } catch (fallbackError: Exception) {
                        Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ fallback", fallbackError)
                        writeToLogFile(context, "STANDARD_FALLBACK_ERROR: ${fallbackError.message}")
                    }
                }
            }, 8000)
        }
    }
    
    private suspend fun applyRulesDirectlyAndroid15(context: Context, uids: String): String {
        return withContext(Dispatchers.IO) {
            try {
                Log.d(TAG, "üî• –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è Android 15")
                
                val prefs = context.getSharedPreferences("proxy_prefs", Context.MODE_PRIVATE)
                val proxyPort = prefs.getInt("proxy_port", DEFAULT_PROXY_PORT)
                val dnsPort = prefs.getInt("dns_port", DEFAULT_DNS_PORT)
                
                val script = buildAndroid15Script(uids, proxyPort, dnsPort)
                executeRootCommandAndroid15(script)
                
            } catch (e: Exception) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è Android 15", e)
                "Android 15 Error: ${e.message}"
            }
        }
    }
    
    private suspend fun applyRulesDirectlyStandard(context: Context, uids: String): String {
        return withContext(Dispatchers.IO) {
            try {
                Log.d(TAG, "üì± –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞–ø—Ä—è–º—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ")
                
                val prefs = context.getSharedPreferences("proxy_prefs", Context.MODE_PRIVATE)
                val proxyPort = prefs.getInt("proxy_port", DEFAULT_PROXY_PORT)
                val dnsPort = prefs.getInt("dns_port", DEFAULT_DNS_PORT)
                
                val script = buildStandardScript(uids, proxyPort, dnsPort)
                executeRootCommandStandard(script)
                
            } catch (e: Exception) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø—Ä—è–º–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è", e)
                "Standard Error: ${e.message}"
            }
        }
    }
    
    private fun buildAndroid15Script(uids: String, proxyPort: Int, dnsPort: Int): String {
        return """
            #!/system/bin/sh
            
            echo "=== App2Proxy Android 15 Boot Script ==="
            echo "–í—Ä–µ–º—è: $(date)"
            echo "Android –≤–µ—Ä—Å–∏—è: $(getprop ro.build.version.release)"
            echo "API —É—Ä–æ–≤–µ–Ω—å: $(getprop ro.build.version.sdk)"
            echo "UID –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: $uids"
            echo "–ü–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏: $proxyPort"
            echo "–ü–æ—Ä—Ç DNS: $dnsPort"
            
            # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
            UIDS="$uids"
            PORT=$proxyPort
            DNS_PORT=$dnsPort
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º root –¥–æ—Å—Ç—É–ø
            if [ "$(id -u)" != "0" ]; then
                echo "–û–®–ò–ë–ö–ê: –ù–µ—Ç root –¥–æ—Å—Ç—É–ø–∞"
                exit 1
            fi
            
            echo "Root –¥–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å iptables
            if ! command -v iptables >/dev/null 2>&1; then
                echo "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: iptables –Ω–µ –Ω–∞–π–¥–µ–Ω"
                exit 1
            fi
            
            echo "iptables –Ω–∞–π–¥–µ–Ω: $(which iptables)"
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Android 15
            echo "–ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è Android 15"
            
            SUCCESS_COUNT=0
            ERROR_COUNT=0
            
            for UID in ${'$'}UIDS; do
                echo "--- Android 15: –û–±—Ä–∞–±–æ—Ç–∫–∞ UID ${'$'}UID ---"
                
                # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–∞–≤–∏–ª (–±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è)
                echo "–û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–∞–≤–∏–ª –¥–ª—è UID ${'$'}UID"
                
                # TCP –ø—Ä–∞–≤–∏–ª–∞ - –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫
                for attempt in 1 2 3; do
                    if iptables -t nat -C OUTPUT -p tcp -m owner --uid-owner ${'$'}UID -j REDIRECT --to-ports ${'$'}PORT 2>/dev/null; then
                        if iptables -t nat -D OUTPUT -p tcp -m owner --uid-owner ${'$'}UID -j REDIRECT --to-ports ${'$'}PORT; then
                            echo "‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ TCP –ø—Ä–∞–≤–∏–ª–æ (–ø–æ–ø—ã—Ç–∫–∞ ${'$'}attempt)"
                        else
                            echo "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è TCP –ø—Ä–∞–≤–∏–ª–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${'$'}attempt)"
                        fi
                    else
                        break
                    fi
                done
                
                # DNS –ø—Ä–∞–≤–∏–ª–∞ - –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫
                for attempt in 1 2 3; do
                    if iptables -t nat -C OUTPUT -p udp --dport 53 -m owner --uid-owner ${'$'}UID -j REDIRECT --to-ports ${'$'}DNS_PORT 2>/dev/null; then
                        if iptables -t nat -D OUTPUT -p udp --dport 53 -m owner --uid-owner ${'$'}UID -j REDIRECT --to-ports ${'$'}DNS_PORT; then
                            echo "‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ DNS –ø—Ä–∞–≤–∏–ª–æ (–ø–æ–ø—ã—Ç–∫–∞ ${'$'}attempt)"
                        else
                            echo "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è DNS –ø—Ä–∞–≤–∏–ª–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${'$'}attempt)"
                        fi
                    else
                        break
                    fi
                done
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                echo "–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è UID ${'$'}UID"
                
                # TCP –ø—Ä–∞–≤–∏–ª–æ
                if iptables -t nat -A OUTPUT -p tcp -m owner --uid-owner ${'$'}UID -j REDIRECT --to-ports ${'$'}PORT 2>/dev/null; then
                    echo "‚úÖ TCP –ø—Ä–∞–≤–∏–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è UID ${'$'}UID (–ø–æ—Ä—Ç ${'$'}PORT)"
                    SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
                else
                    echo "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è TCP –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è UID ${'$'}UID"
                    ERROR_COUNT=$((ERROR_COUNT + 1))
                fi
                
                # DNS –ø—Ä–∞–≤–∏–ª–æ
                if iptables -t nat -A OUTPUT -p udp --dport 53 -m owner --uid-owner ${'$'}UID -j REDIRECT --to-ports ${'$'}DNS_PORT 2>/dev/null; then
                    echo "‚úÖ DNS –ø—Ä–∞–≤–∏–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è UID ${'$'}UID (–ø–æ—Ä—Ç ${'$'}DNS_PORT)"
                    SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
                else
                    echo "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è DNS –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è UID ${'$'}UID"
                    ERROR_COUNT=$((ERROR_COUNT + 1))
                fi
                
                echo "--- –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ UID ${'$'}UID ---"
            done
            
            echo ""
            echo "=== ANDROID 15 –û–¢–ß–ï–¢ ==="
            echo "–£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${'$'}SUCCESS_COUNT"
            echo "–û—à–∏–±–æ–∫: ${'$'}ERROR_COUNT"
            echo "–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö UID: $(echo ${'$'}UIDS | wc -w)"
            echo "–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–æ—Ä—Ç—ã: –ø—Ä–æ–∫—Å–∏=${'$'}PORT, DNS=${'$'}DNS_PORT"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            echo "=== –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í–ò–õ ==="
            FOUND_RULES=$(iptables -t nat -L OUTPUT -n | grep -E "(${'$'}PORT|${'$'}DNS_PORT)" | wc -l)
            echo "–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª: ${'$'}FOUND_RULES"
            
            if [ ${'$'}FOUND_RULES -gt 0 ]; then
                echo "‚úÖ ANDROID 15: –ü–†–ê–í–ò–õ–ê –£–°–ü–ï–®–ù–û –ü–†–ò–ú–ï–ù–ï–ù–´"
                echo "Applied rules for UIDs: ${'$'}UIDS with proxy port ${'$'}PORT and DNS port ${'$'}DNS_PORT"
            else
                echo "‚ö†Ô∏è ANDROID 15: –ü–†–ê–í–ò–õ–ê –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–´"
                echo "No rules found for UIDs: ${'$'}UIDS"
            fi
            
            echo "=== –ö–û–ù–ï–¶ ANDROID 15 –°–ö–†–ò–ü–¢–ê ==="
        """.trimIndent()
    }
    
    private fun buildStandardScript(uids: String, proxyPort: Int, dnsPort: Int): String {
        return """
            #!/system/bin/sh
            
            echo "=== App2Proxy Standard Boot Script ==="
            echo "–í—Ä–µ–º—è: $(date)"
            echo "UID –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: $uids"
            echo "–ü–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏: $proxyPort"
            echo "–ü–æ—Ä—Ç DNS: $dnsPort"
            
            UIDS="$uids"
            PORT=$proxyPort
            DNS_PORT=$dnsPort
            
            if ! command -v iptables >/dev/null 2>&1; then
                echo "–û–®–ò–ë–ö–ê: iptables –Ω–µ –Ω–∞–π–¥–µ–Ω"
                exit 1
            fi
            
            for UID in ${'$'}UIDS; do
                echo "–û–±—Ä–∞–±–æ—Ç–∫–∞ UID: ${'$'}UID"
                
                # –û—á–∏—Å—Ç–∫–∞
                while iptables -t nat -C OUTPUT -p tcp -m owner --uid-owner ${'$'}UID -j REDIRECT --to-ports ${'$'}PORT 2>/dev/null; do
                    iptables -t nat -D OUTPUT -p tcp -m owner --uid-owner ${'$'}UID -j REDIRECT --to-ports ${'$'}PORT
                done
                
                while iptables -t nat -C OUTPUT -p udp --dport 53 -m owner --uid-owner ${'$'}UID -j REDIRECT --to-ports ${'$'}DNS_PORT 2>/dev/null; do
                    iptables -t nat -D OUTPUT -p udp --dport 53 -m owner --uid-owner ${'$'}UID -j REDIRECT --to-ports ${'$'}DNS_PORT
                done
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
                iptables -t nat -A OUTPUT -p tcp -m owner --uid-owner ${'$'}UID -j REDIRECT --to-ports ${'$'}PORT
                iptables -t nat -A OUTPUT -p udp --dport 53 -m owner --uid-owner ${'$'}UID -j REDIRECT --to-ports ${'$'}DNS_PORT
                
                echo "–ü—Ä–∞–≤–∏–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è UID ${'$'}UID (–ø—Ä–æ–∫—Å–∏: ${'$'}PORT, DNS: ${'$'}DNS_PORT)"
            done
            
            echo "Applied rules for UIDs: ${'$'}UIDS with proxy port ${'$'}PORT and DNS port ${'$'}DNS_PORT"
        """.trimIndent()
    }
    
    private fun executeRootCommandAndroid15(script: String): String {
        return try {
            Log.d(TAG, "üî• –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Android 15")
            
            val process = Runtime.getRuntime().exec("su")
            val writer = process.outputStream.bufferedWriter()
            
            writer.write(script)
            writer.write("\nexit\n")
            writer.flush()
            writer.close()
            
            val exitCode = process.waitFor()
            val output = process.inputStream.bufferedReader().readText()
            val errorOutput = process.errorStream.bufferedReader().readText()
            
            Log.d(TAG, "Android 15 - –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: $exitCode")
            Log.d(TAG, "Android 15 - –í—ã–≤–æ–¥: $output")
            
            if (errorOutput.isNotEmpty()) {
                Log.w(TAG, "Android 15 - –û—à–∏–±–∫–∏: $errorOutput")
            }
            
            if (exitCode == 0) output else "Android 15 Error (–∫–æ–¥ $exitCode): $errorOutput"
            
        } catch (e: Exception) {
            val error = "Android 15 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${e.message}"
            Log.e(TAG, error, e)
            error
        }
    }
    
    private fun executeRootCommandStandard(script: String): String {
        return try {
            Log.d(TAG, "üì± –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã")
            
            val process = Runtime.getRuntime().exec("su")
            val writer = process.outputStream.bufferedWriter()
            
            writer.write(script)
            writer.write("\nexit\n")
            writer.flush()
            writer.close()
            
            val exitCode = process.waitFor()
            val output = process.inputStream.bufferedReader().readText()
            
            Log.d(TAG, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–¥ –≤—ã—Ö–æ–¥–∞: $exitCode")
            Log.d(TAG, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥: $output")
            
            if (exitCode == 0) output else "Standard Error (–∫–æ–¥ $exitCode)"
            
        } catch (e: Exception) {
            val error = "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${e.message}"
            Log.e(TAG, error, e)
            error
        }
    }
    
    private fun writeToLogFile(context: Context, message: String) {
        try {
            val logFile = File(context.filesDir, "boot_receiver_log.txt")
            
            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (!logFile.parentFile?.exists()!!) {
                logFile.parentFile?.mkdirs()
            }
            
            val timestamp = java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS", java.util.Locale.getDefault()).format(java.util.Date())
            
            java.io.FileWriter(logFile, true).use { writer ->
                writer.appendLine("[$timestamp] $message")
            }
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ —Ñ–∞–π–ª", e)
        }
    }
}
