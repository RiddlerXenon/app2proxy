package dev.rx.app2proxy

import android.content.Intent
import android.os.Build
import android.os.Bundle
import android.text.Editable
import android.text.TextWatcher
import android.util.Log
import android.view.GestureDetector
import android.view.MotionEvent
import android.view.View
import android.view.inputmethod.InputMethodManager
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import androidx.fragment.app.Fragment
import androidx.fragment.app.FragmentActivity
import androidx.viewpager2.adapter.FragmentStateAdapter
import com.google.android.material.color.DynamicColors
import dev.rx.app2proxy.databinding.ActivityMainBinding
import kotlin.math.abs

class MainActivity : AppCompatActivity(), RulesUpdateListener {
    
    companion object {
        private const val TAG = "MainActivity"
        private const val SWIPE_THRESHOLD = 100
        private const val SWIPE_VELOCITY_THRESHOLD = 100
    }
    
    private lateinit var binding: ActivityMainBinding
    private var showSystemApps = false
    private var isSearchExpanded = false
    private lateinit var gestureDetector: GestureDetector
    
    override fun onCreate(savedInstanceState: Bundle?) {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –¥–æ super.onCreate
        applySelectedTheme()
        
        super.onCreate(savedInstanceState)
        
        try {
            enableEdgeToEdge()
            binding = ActivityMainBinding.inflate(layoutInflater)
            setContentView(binding.root)
            
            setupGestureDetector()
            setupToolbar()
            setupToolbarButtons()
            setupSearch()
            setupViewPager()
            setupBottomNavigation()
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω Material You
            val prefs = getSharedPreferences("proxy_prefs", MODE_PRIVATE)
            if (prefs.getBoolean("material_you", false) && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                DynamicColors.applyToActivityIfAvailable(this)
            }
            
            Log.d(TAG, "‚úÖ MainActivity —Å–æ–∑–¥–∞–Ω")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è MainActivity", e)
        }
    }
    
    private fun setupGestureDetector() {
        gestureDetector = GestureDetector(this, object : GestureDetector.SimpleOnGestureListener() {
            override fun onFling(
                e1: MotionEvent?,
                e2: MotionEvent,
                velocityX: Float,
                velocityY: Float
            ): Boolean {
                if (!isSearchExpanded) return false
                
                val diffX = e2.x - (e1?.x ?: 0f)
                val diffY = e2.y - (e1?.y ?: 0f)
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø (–≤–ª–µ–≤–æ –∏–ª–∏ –≤–ø—Ä–∞–≤–æ)
                if (abs(diffX) > abs(diffY)) {
                    if (abs(diffX) > SWIPE_THRESHOLD && abs(velocityX) > SWIPE_VELOCITY_THRESHOLD) {
                        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –ø—Ä–∏ —Å–≤–∞–π–ø–µ –≤–ª–µ–≤–æ –∏–ª–∏ –≤–ø—Ä–∞–≤–æ
                        Log.d(TAG, "üîç –ü–æ–∏—Å–∫ –∑–∞–∫—Ä—ã—Ç —Å–≤–∞–π–ø–æ–º")
                        collapseSearch()
                        return true
                    }
                }
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø –≤–≤–µ—Ä—Ö
                else if (diffY < -SWIPE_THRESHOLD && abs(velocityY) > SWIPE_VELOCITY_THRESHOLD) {
                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –ø—Ä–∏ —Å–≤–∞–π–ø–µ –≤–≤–µ—Ä—Ö
                    Log.d(TAG, "üîç –ü–æ–∏—Å–∫ –∑–∞–∫—Ä—ã—Ç —Å–≤–∞–π–ø–æ–º –≤–≤–µ—Ä—Ö")
                    collapseSearch()
                    return true
                }
                
                return false
            }
        })
    }
    
    override fun onTouchEvent(event: MotionEvent): Boolean {
        gestureDetector.onTouchEvent(event)
        return super.onTouchEvent(event)
    }
    
    override fun dispatchTouchEvent(ev: MotionEvent): Boolean {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∂–µ—Å—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–∏—Å–∫ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç
        if (isSearchExpanded) {
            gestureDetector.onTouchEvent(ev)
        }
        return super.dispatchTouchEvent(ev)
    }

    private fun applySelectedTheme() {
        try {
            val prefs = getSharedPreferences("proxy_prefs", MODE_PRIVATE)
            val isDarkTheme = prefs.getBoolean("dark_theme", true)
            val isAmoledTheme = prefs.getBoolean("amoled_theme", false)
            
            if (isDarkTheme && isAmoledTheme) {
                setTheme(R.style.Theme_App2Proxy_Amoled)
            } else {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç DayNight
                setTheme(R.style.Theme_App2Proxy)
            }
            
            Log.d(TAG, "‚úÖ –¢–µ–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞: dark=$isDarkTheme, amoled=$isAmoledTheme")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã", e)
        }
    }

    private fun applyAmoledStylesToToolbarButtons() {
        try {
            val whiteColor = ContextCompat.getColor(this, android.R.color.white)
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–µ–ª—ã–π —Ü–≤–µ—Ç –∫–æ –≤—Å–µ–º –∏–∫–æ–Ω–∫–∞–º –∫–Ω–æ–ø–æ–∫ –≤ toolbar
            binding.btnSearch.iconTint = android.content.res.ColorStateList.valueOf(whiteColor)
            binding.btnSettings.iconTint = android.content.res.ColorStateList.valueOf(whiteColor)
            binding.btnToggleSystemApps.iconTint = android.content.res.ColorStateList.valueOf(whiteColor)
            binding.btnCloseSearch.iconTint = android.content.res.ColorStateList.valueOf(whiteColor)
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–µ–ª—ã–π —Ü–≤–µ—Ç –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É
            binding.toolbarTitle.setTextColor(whiteColor)
            
            Log.d(TAG, "‚úÖ AMOLED —Å—Ç–∏–ª—å –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ –∫–Ω–æ–ø–∫–∞–º toolbar")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AMOLED –∫ –∫–Ω–æ–ø–∫–∞–º", e)
        }
    }

    private fun setupToolbar() {
        try {
            setSupportActionBar(binding.toolbar)
            supportActionBar?.apply {
                // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π
                setDisplayShowTitleEnabled(false)
            }
            
            Log.d(TAG, "‚úÖ Toolbar –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ toolbar", e)
        }
    }
    
    private fun setupToolbarButtons() {
        try {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
            binding.btnSearch.setOnClickListener {
                expandSearch()
            }
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∏—Å–∫–∞
            binding.btnCloseSearch.setOnClickListener {
                collapseSearch()
            }
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
            updateSystemAppsButtonIcon()
            binding.btnToggleSystemApps.setOnClickListener {
                showSystemApps = !showSystemApps
                updateSystemAppsButtonIcon()
                getAppListFragment()?.setShowSystemApps(showSystemApps)
                
                val message = if (showSystemApps) "–ü–æ–∫–∞–∑–∞–Ω—ã —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" else "–°–∫—Ä—ã—Ç—ã —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
                Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
            }
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            binding.btnSettings.setOnClickListener {
                try {
                    startActivity(Intent(this, SettingsActivity::class.java))
                } catch (e: Exception) {
                    Log.e(TAG, "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", e)
                    Toast.makeText(this, "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", Toast.LENGTH_SHORT).show()
                }
            }
            
            Log.d(TAG, "‚úÖ –ö–Ω–æ–ø–∫–∏ toolbar –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫ toolbar", e)
        }
    }

    private fun setupSearch() {
        try {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
            binding.searchEditText.addTextChangedListener(object : TextWatcher {
                override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
                
                override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}
                
                override fun afterTextChanged(s: Editable?) {
                    val query = s?.toString() ?: ""
                    performSearch(query)
                }
            })
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ –ø–æ–∏—Å–∫–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
            binding.searchEditText.setOnEditorActionListener { _, actionId, _ ->
                if (actionId == android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH) {
                    hideKeyboard()
                    true
                } else {
                    false
                }
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Å–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
            binding.searchEditText.setOnTouchListener { _, event ->
                // –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞—Å–∞–Ω–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä—É –∂–µ—Å—Ç–æ–≤, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∏—Ö
                gestureDetector.onTouchEvent(event)
                false // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false, —á—Ç–æ–±—ã EditText –ø—Ä–æ–¥–æ–ª–∂–∞–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞—Å–∞–Ω–∏—è
            }
            
            Log.d(TAG, "‚úÖ –ü–æ–∏—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞", e)
        }
    }

    private fun expandSearch() {
        if (isSearchExpanded) return
        
        try {
            isSearchExpanded = true
            
            // –°–∫—Ä—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—É–ª–±–∞—Ä–∞
            binding.toolbarNormalState.visibility = View.GONE
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
            binding.toolbarSearchState.visibility = View.VISIBLE
            
            // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            binding.searchEditText.requestFocus()
            showKeyboard()
            
            Log.d(TAG, "‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞", e)
        }
    }

    private fun collapseSearch() {
        if (!isSearchExpanded) return
        
        try {
            isSearchExpanded = false
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
            binding.searchEditText.text?.clear()
            
            // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
            binding.toolbarSearchState.visibility = View.GONE
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—É–ª–±–∞—Ä–∞
            binding.toolbarNormalState.visibility = View.VISIBLE
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            hideKeyboard()
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
            getAppListFragment()?.filterApps("")
            
            Log.d(TAG, "‚úÖ –ü–æ–∏—Å–∫ —Å–≤–µ—Ä–Ω—É—Ç")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞", e)
        }
    }

    private fun performSearch(query: String) {
        try {
            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
            if (binding.viewPager.currentItem == 0) {
                getAppListFragment()?.filterApps(query)
                
                if (query.isNotBlank()) {
                    val count = getAppListFragment()?.getFilteredAppsCount() ?: 0
                    Log.d(TAG, "üîç –ù–∞–π–¥–µ–Ω–æ $count –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: $query")
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞", e)
        }
    }

    private fun showKeyboard() {
        try {
            val imm = getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
            imm.showSoftInput(binding.searchEditText, InputMethodManager.SHOW_IMPLICIT)
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã", e)
        }
    }

    private fun hideKeyboard() {
        try {
            val imm = getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
            imm.hideSoftInputFromWindow(binding.searchEditText.windowToken, 0)
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã", e)
        }
    }
    
    private fun updateSystemAppsButtonIcon() {
        try {
            val iconRes = if (showSystemApps) R.drawable.ic_visibility_24 else R.drawable.ic_visibility_off_24
            binding.btnToggleSystemApps.setIconResource(iconRes)
            
            val description = if (showSystemApps) "–°–∫—Ä—ã—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" else "–ü–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
            binding.btnToggleSystemApps.contentDescription = description
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏", e)
        }
    }

    private fun setupViewPager() {
        try {
            val adapter = ViewPagerAdapter(this)
            binding.viewPager.adapter = adapter
            Log.d(TAG, "‚úÖ ViewPager –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ViewPager", e)
        }
    }

    private fun setupBottomNavigation() {
        try {
            val bottomNavigation = binding.bottomNavigation
            
            bottomNavigation.setOnItemSelectedListener { item ->
                when (item.itemId) {
                    R.id.nav_apps -> {
                        binding.viewPager.currentItem = 0
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
                        binding.btnSearch.visibility = View.VISIBLE
                        true
                    }
                    R.id.nav_rules -> {
                        binding.viewPager.currentItem = 1
                        // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ –∏ —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
                        if (isSearchExpanded) {
                            collapseSearch()
                        }
                        binding.btnSearch.visibility = View.GONE
                        true
                    }
                    else -> false
                }
            }

            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º ViewPager —Å BottomNavigation
            binding.viewPager.registerOnPageChangeCallback(object : androidx.viewpager2.widget.ViewPager2.OnPageChangeCallback() {
                override fun onPageSelected(position: Int) {
                    super.onPageSelected(position)
                    when (position) {
                        0 -> {
                            bottomNavigation.selectedItemId = R.id.nav_apps
                            binding.btnSearch.visibility = View.VISIBLE
                        }
                        1 -> {
                            bottomNavigation.selectedItemId = R.id.nav_rules
                            if (isSearchExpanded) {
                                collapseSearch()
                            }
                            binding.btnSearch.visibility = View.GONE
                        }
                    }
                }
            })
            
            Log.d(TAG, "‚úÖ BottomNavigation –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ BottomNavigation", e)
        }
    }

    override fun onResume() {
        super.onResume()
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º AMOLED —Å—Ç–∏–ª–∏ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        applyAmoledThemeIfNeeded()
        
        val prefs = getSharedPreferences("proxy_prefs", MODE_PRIVATE)
        val useMaterialYou = prefs.getBoolean("material_you", false)
        val useAmoledTheme = prefs.getBoolean("amoled_theme", false)
        val isDarkTheme = prefs.getBoolean("dark_theme", true)
        
        if (useMaterialYou && useAmoledTheme && isDarkTheme && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            binding.toolbar.postDelayed({
                AmoledDynamicColorScheme.applyAmoledToolbarStyle(binding.toolbar, this)
                applyAmoledStylesToToolbarButtons()
            }, 100)
        }    
    }

    override fun onBackPressed() {
        if (isSearchExpanded) {
            Log.d(TAG, "üîç –ü–æ–∏—Å–∫ –∑–∞–∫—Ä—ã—Ç –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥")
            collapseSearch()
        } else {
            // super.onBackPressed() 'onBackPressed(): Unit' is deprecated. Deprecated in Java
            onBackPressedDispatcher.onBackPressed()
        }
    }

    private fun checkRulesConsistency() {
        try {
            val prefs = getSharedPreferences("proxy_prefs", MODE_PRIVATE)
            val selectedUids = prefs.getStringSet("selected_uids", emptySet()) ?: emptySet()
            
            if (selectedUids.isNotEmpty()) {
                Log.d(TAG, "üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª –¥–ª—è ${selectedUids.size} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
                
                val missingRules = mutableListOf<String>()
                
                for (uid in selectedUids) {
                    val hasOutputRule = checkOutputRuleExists(uid)
                    if (!hasOutputRule) {
                        missingRules.add(uid)
                    }
                }
                
                if (missingRules.isNotEmpty()) {
                    Log.w(TAG, "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è ${missingRules.size} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏", e)
        }
    }

    private fun checkOutputRuleExists(uid: String): Boolean {
        try {
            val process = ProcessBuilder("su", "-c", "iptables -t nat -L OUTPUT -n")
                .redirectErrorStream(true)
                .start()
            
            val output = process.inputStream.bufferedReader().readText()
            process.waitFor()
            
            return output.contains("owner UID match $uid")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è UID $uid", e)
            return false
        }
    }

    private fun getAppListFragment(): AppListFragment? {
        return try {
            supportFragmentManager.findFragmentByTag("f0") as? AppListFragment
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è AppListFragment", e)
            null
        }
    }

    private fun getRulesManagerFragment(): RulesManagerFragment? {
        return try {
            supportFragmentManager.findFragmentByTag("f1") as? RulesManagerFragment
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è RulesManagerFragment", e)
            null
        }
    }

    private fun applyAmoledThemeIfNeeded() {
        val prefs = getSharedPreferences("proxy_prefs", MODE_PRIVATE)
        val useAmoledTheme = prefs.getBoolean("amoled_theme", false)
        val isDarkTheme = prefs.getBoolean("dark_theme", true)
        val useMaterialYou = prefs.getBoolean("material_you", false)
        
        if (useAmoledTheme && isDarkTheme) {
            if (useMaterialYou && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                AmoledDynamicColorScheme.applyAmoledToolbarStyle(binding.toolbar, this)
            }
            applyAmoledStylesToToolbarButtons()
        }
    }

    override fun onRulesUpdated() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        getAppListFragment()?.refreshSelectedStates()
    }

    // –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è ViewPager
    private inner class ViewPagerAdapter(activity: FragmentActivity) : FragmentStateAdapter(activity) {
        override fun getItemCount(): Int = 2

        override fun createFragment(position: Int): Fragment {
            return when (position) {
                0 -> AppListFragment()
                1 -> {
                    val fragment = RulesManagerFragment()
                    fragment.setRulesUpdateListener(this@MainActivity)
                    fragment
                }
                else -> throw IllegalArgumentException("Invalid position: $position")
            }
        }
    }
}
