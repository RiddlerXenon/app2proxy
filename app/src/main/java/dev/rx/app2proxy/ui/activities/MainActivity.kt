package dev.rx.app2proxy

import android.content.Intent
import android.os.Build
import android.os.Bundle
import android.text.Editable
import android.text.TextWatcher
import android.util.Log
import android.view.View
import android.view.inputmethod.InputMethodManager
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.activity.OnBackPressedCallback
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import com.google.android.material.color.DynamicColors
import dev.rx.app2proxy.databinding.ActivityMainBinding
import dev.rx.app2proxy.ui.activities.BaseActivity

class MainActivity : BaseActivity(), RulesUpdateListener {
    
    companion object {
        private const val TAG = "MainActivity"
    }
    
    private lateinit var binding: ActivityMainBinding
    private var showSystemApps = false
    private var isSearchExpanded = false
    private var appListFragment: AppListFragment? = null
    
    override fun onCreate(savedInstanceState: Bundle?) {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –¥–æ super.onCreate
        applySelectedTheme()
        
        super.onCreate(savedInstanceState)
        
        try {
            enableEdgeToEdge()
            binding = ActivityMainBinding.inflate(layoutInflater)
            setContentView(binding.root)
            
            setupToolbar()
            setupToolbarButtons()
            setupSearch()
            setupAppListFragment()
            setupBackPressedCallback()
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω Material You
            val prefs = getSharedPreferences("proxy_prefs", MODE_PRIVATE)
            if (prefs.getBoolean("material_you", false) && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                DynamicColors.applyToActivityIfAvailable(this)
            }
            
            Log.d(TAG, "‚úÖ MainActivity —Å–æ–∑–¥–∞–Ω")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è MainActivity", e)
        }
    }
    
    private fun setupAppListFragment() {
        try {
            if (appListFragment == null) {
                appListFragment = AppListFragment()
                supportFragmentManager.beginTransaction()
                    .replace(R.id.fragmentContainer, appListFragment!!)
                    .commit()
            }
            Log.d(TAG, "‚úÖ AppListFragment –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AppListFragment", e)
        }
    }
    
    private fun setupBackPressedCallback() {
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É back gesture –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∏—Å–∫–∞
        onBackPressedDispatcher.addCallback(this, object : OnBackPressedCallback(true) {
            override fun handleOnBackPressed() {
                if (isSearchExpanded) {
                    Log.d(TAG, "üîç –ü–æ–∏—Å–∫ –∑–∞–∫—Ä—ã—Ç back gesture")
                    collapseSearch()
                } else {
                    // –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ –æ—Ç–∫—Ä—ã—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ back
                    isEnabled = false
                    onBackPressedDispatcher.onBackPressed()
                }
            }
        })
    }

    private fun applySelectedTheme() {
        try {
            val prefs = getSharedPreferences("proxy_prefs", MODE_PRIVATE)
            val isDarkTheme = prefs.getBoolean("dark_theme", true)
            val isAmoledTheme = prefs.getBoolean("amoled_theme", false)
            
            if (isDarkTheme && isAmoledTheme) {
                setTheme(R.style.Theme_App2Proxy_Amoled)
            } else {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç DayNight
                setTheme(R.style.Theme_App2Proxy)
            }
            
            Log.d(TAG, "‚úÖ –¢–µ–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞: dark=$isDarkTheme, amoled=$isAmoledTheme")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã", e)
        }
    }

    private fun applyAmoledStylesToToolbarButtons() {
        try {
            val whiteColor = ContextCompat.getColor(this, android.R.color.white)
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–µ–ª—ã–π —Ü–≤–µ—Ç –∫–æ –≤—Å–µ–º –∏–∫–æ–Ω–∫–∞–º –∫–Ω–æ–ø–æ–∫ –≤ toolbar
            binding.btnSearch.iconTint = android.content.res.ColorStateList.valueOf(whiteColor)
            binding.btnSettings.iconTint = android.content.res.ColorStateList.valueOf(whiteColor)
            binding.btnToggleSystemApps.iconTint = android.content.res.ColorStateList.valueOf(whiteColor)
            binding.btnCloseSearch.iconTint = android.content.res.ColorStateList.valueOf(whiteColor)
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–µ–ª—ã–π —Ü–≤–µ—Ç –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É
            binding.toolbarTitle.setTextColor(whiteColor)
            
            Log.d(TAG, "‚úÖ AMOLED —Å—Ç–∏–ª—å –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ –∫–Ω–æ–ø–∫–∞–º toolbar")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AMOLED –∫ –∫–Ω–æ–ø–∫–∞–º", e)
        }
    }

    private fun setupToolbar() {
        try {
            setSupportActionBar(binding.toolbar)
            supportActionBar?.apply {
                // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π
                setDisplayShowTitleEnabled(false)
            }
            
            Log.d(TAG, "‚úÖ Toolbar –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ toolbar", e)
        }
    }
    
    private fun setupToolbarButtons() {
        try {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
            binding.btnSearch.setOnClickListener {
                expandSearch()
            }
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∏—Å–∫–∞
            binding.btnCloseSearch.setOnClickListener {
                collapseSearch()
            }
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
            updateSystemAppsButtonIcon()
            binding.btnToggleSystemApps.setOnClickListener {
                showSystemApps = !showSystemApps
                updateSystemAppsButtonIcon()
                appListFragment?.setShowSystemApps(showSystemApps)
                
                val message = if (showSystemApps) getString(R.string.system_apps_shown) else getString(R.string.system_apps_hidden)
                Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
            }
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            binding.btnSettings.setOnClickListener {
                try {
                    startActivity(Intent(this, SettingsActivity::class.java))
                } catch (e: Exception) {
                    Log.e(TAG, "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", e)
                    Toast.makeText(this, getString(R.string.error_opening_settings), Toast.LENGTH_SHORT).show()
                }
            }
            
            Log.d(TAG, "‚úÖ –ö–Ω–æ–ø–∫–∏ toolbar –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫ toolbar", e)
        }
    }

    private fun setupSearch() {
        try {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
            binding.searchEditText.addTextChangedListener(object : TextWatcher {
                override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
                
                override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}
                
                override fun afterTextChanged(s: Editable?) {
                    val query = s?.toString() ?: ""
                    performSearch(query)
                }
            })
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ –ø–æ–∏—Å–∫–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
            binding.searchEditText.setOnEditorActionListener { _, actionId, _ ->
                if (actionId == android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH) {
                    hideKeyboard()
                    true
                } else {
                    false
                }
            }
            
            Log.d(TAG, "‚úÖ –ü–æ–∏—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞", e)
        }
    }

    private fun expandSearch() {
        if (isSearchExpanded) return
        
        try {
            isSearchExpanded = true
            
            // –°–∫—Ä—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—É–ª–±–∞—Ä–∞
            binding.toolbarNormalState.visibility = View.GONE
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
            binding.toolbarSearchState.visibility = View.VISIBLE
            
            // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            binding.searchEditText.requestFocus()
            showKeyboard()
            
            Log.d(TAG, "‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞", e)
        }
    }

    private fun collapseSearch() {
        if (!isSearchExpanded) return
        
        try {
            isSearchExpanded = false
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
            binding.searchEditText.text?.clear()
            
            // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
            binding.toolbarSearchState.visibility = View.GONE
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—É–ª–±–∞—Ä–∞
            binding.toolbarNormalState.visibility = View.VISIBLE
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            hideKeyboard()
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
            appListFragment?.filterApps("")
            
            Log.d(TAG, "‚úÖ –ü–æ–∏—Å–∫ —Å–≤–µ—Ä–Ω—É—Ç")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞", e)
        }
    }

    private fun performSearch(query: String) {
        try {
            appListFragment?.filterApps(query)
            
            if (query.isNotBlank()) {
                val count = appListFragment?.getFilteredAppsCount() ?: 0
                Log.d(TAG, "üîç –ù–∞–π–¥–µ–Ω–æ $count –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: $query")
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞", e)
        }
    }

    private fun showKeyboard() {
        try {
            val imm = getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
            imm.showSoftInput(binding.searchEditText, InputMethodManager.SHOW_IMPLICIT)
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã", e)
        }
    }

    private fun hideKeyboard() {
        try {
            val imm = getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
            imm.hideSoftInputFromWindow(binding.searchEditText.windowToken, 0)
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã", e)
        }
    }
    
    private fun updateSystemAppsButtonIcon() {
        try {
            val iconRes = if (showSystemApps) R.drawable.ic_visibility_24 else R.drawable.ic_visibility_off_24
            binding.btnToggleSystemApps.setIconResource(iconRes)
            
            val description = if (showSystemApps) getString(R.string.hide_system_apps_description) else getString(R.string.show_system_apps_description)
            binding.btnToggleSystemApps.contentDescription = description
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏", e)
        }
    }

    override fun onResume() {
        super.onResume()
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º AMOLED —Å—Ç–∏–ª–∏ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        applyAmoledThemeIfNeeded()
        
        val prefs = getSharedPreferences("proxy_prefs", MODE_PRIVATE)
        val useMaterialYou = prefs.getBoolean("material_you", false)
        val useAmoledTheme = prefs.getBoolean("amoled_theme", false)
        val isDarkTheme = prefs.getBoolean("dark_theme", true)
        
        if (useMaterialYou && useAmoledTheme && isDarkTheme && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            binding.toolbar.postDelayed({
                AmoledDynamicColorScheme.applyAmoledToolbarStyle(binding.toolbar, this)
                applyAmoledStylesToToolbarButtons()
            }, 100)
        }    
    }

    private fun checkRulesConsistency() {
        try {
            val prefs = getSharedPreferences("proxy_prefs", MODE_PRIVATE)
            val selectedUids = prefs.getStringSet("selected_uids", emptySet()) ?: emptySet()
            
            if (selectedUids.isNotEmpty()) {
                Log.d(TAG, "üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª –¥–ª—è ${selectedUids.size} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
                
                val missingRules = mutableListOf<String>()
                
                for (uid in selectedUids) {
                    val hasOutputRule = checkOutputRuleExists(uid)
                    if (!hasOutputRule) {
                        missingRules.add(uid)
                    }
                }
                
                if (missingRules.isNotEmpty()) {
                    Log.w(TAG, "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è ${missingRules.size} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏", e)
        }
    }

    private fun checkOutputRuleExists(uid: String): Boolean {
        try {
            val process = ProcessBuilder("su", "-c", "iptables -t nat -L OUTPUT -n")
                .redirectErrorStream(true)
                .start()
            
            val output = process.inputStream.bufferedReader().readText()
            process.waitFor()
            
            return output.contains("owner UID match $uid")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è UID $uid", e)
            return false
        }
    }

    private fun applyAmoledThemeIfNeeded() {
        val prefs = getSharedPreferences("proxy_prefs", MODE_PRIVATE)
        val useAmoledTheme = prefs.getBoolean("amoled_theme", false)
        val isDarkTheme = prefs.getBoolean("dark_theme", true)
        val useMaterialYou = prefs.getBoolean("material_you", false)
        
        if (useAmoledTheme && isDarkTheme) {
            if (useMaterialYou && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                AmoledDynamicColorScheme.applyAmoledToolbarStyle(binding.toolbar, this)
            }
            applyAmoledStylesToToolbarButtons()
        }
    }

    override fun onRulesUpdated() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        appListFragment?.refreshSelectedStates()
    }
}
