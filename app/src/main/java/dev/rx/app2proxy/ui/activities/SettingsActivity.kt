package dev.rx.app2proxy

import android.content.Intent
import android.content.SharedPreferences
import android.os.Build
import android.os.Bundle
import android.util.Log
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatDelegate
import androidx.core.view.ViewCompat
import androidx.core.view.WindowCompat
import androidx.core.view.WindowInsetsCompat
import com.google.android.material.appbar.MaterialToolbar
import com.google.android.material.color.DynamicColors
import dev.rx.app2proxy.databinding.ActivitySettingsBinding
import dev.rx.app2proxy.ui.activities.BaseActivity
import dev.rx.app2proxy.utils.LanguageManager

class SettingsActivity : BaseActivity() {
    
    companion object {
        private const val TAG = "SettingsActivity"
        private const val DEFAULT_PROXY_PORT = 12345
        private const val DEFAULT_DNS_PORT = 10853
    }
    
    private lateinit var binding: ActivitySettingsBinding
    private lateinit var prefs: SharedPreferences

    override fun onCreate(savedInstanceState: Bundle?) {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        applySelectedTheme()
        super.onCreate(savedInstanceState)
        
        binding = ActivitySettingsBinding.inflate(layoutInflater)
        setContentView(binding.root)
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ edge-to-edge
        setupEdgeToEdge()
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SharedPreferences
        prefs = getSharedPreferences("proxy_prefs", MODE_PRIVATE)
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ toolbar
        setupToolbar()

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π –∏ –ø–æ–ª–µ–π
        setupSwitches()
        setupNetworkFields()
        setupLanguageButton()
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º AMOLED —Ñ–æ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        applyAmoledThemeIfNeeded()
    }

    private fun setupLanguageButton() {
        binding.languageButton.setOnClickListener {
            showLanguageDialog()
        }
        updateLanguageButtonText()
    }

    private fun updateLanguageButtonText() {
        val currentLanguage = getLanguageManager().getCurrentLanguage()
        val displayName = getLanguageManager().getLanguageDisplayName(currentLanguage, this)
        binding.languageButton.text = displayName
    }

    private fun showLanguageDialog() {
        val languages = LanguageManager.SUPPORTED_LANGUAGES
        val languageNames = languages.map { 
            getLanguageManager().getLanguageDisplayName(it, this) 
        }.toTypedArray()
        
        val currentLanguage = getLanguageManager().getCurrentLanguage()
        val currentIndex = languages.indexOf(currentLanguage)
        
        AlertDialog.Builder(this)
            .setTitle(R.string.language_title)
            .setSingleChoiceItems(languageNames, currentIndex) { dialog, which ->
                val selectedLanguage = languages[which]
                if (selectedLanguage != currentLanguage) {
                    getLanguageManager().setLanguage(selectedLanguage)
                    updateLanguageButtonText()
                    
                    Toast.makeText(this, R.string.language_changed, Toast.LENGTH_LONG).show()
                    
                    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
                    val intent = Intent(this, MainActivity::class.java)
                    intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
                    startActivity(intent)
                    finish()
                }
                dialog.dismiss()
            }
            .setNegativeButton(android.R.string.cancel, null)
            .show()
    }

    private fun applySelectedTheme() {
        prefs = getSharedPreferences("proxy_prefs", MODE_PRIVATE)
        val useMaterialYou = prefs.getBoolean("material_you", false)
        val useAmoledTheme = prefs.getBoolean("amoled_theme", false)
        val isDarkTheme = prefs.getBoolean("dark_theme", true)
        
        Log.d(TAG, "üé® –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –≤ Settings: MaterialYou=$useMaterialYou, AMOLED=$useAmoledTheme, Dark=$isDarkTheme")
        
        // –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º –±–∞–∑–æ–≤—É—é —Ç–µ–º—É
        when {
            useAmoledTheme && isDarkTheme -> setTheme(R.style.Theme_App2Proxy_Amoled)
            else -> setTheme(R.style.Theme_App2Proxy)
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞ Material You —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        if (useMaterialYou && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            if (useAmoledTheme && isDarkTheme) {
                // –î–ª—è AMOLED —Ç–µ–º—ã —Å Material You –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
                Log.d(TAG, "üé® –ü—Ä–∏–º–µ–Ω—è–µ–º AMOLED + Material You")
                AmoledDynamicColorScheme.applyAmoledDynamicColors(this)
            } else {
                // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º Material You —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ
                Log.d(TAG, "üé® –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Material You")
                DynamicColors.applyToActivityIfAvailable(this)
            }
        }
    }
    
    private fun applyAmoledThemeIfNeeded() {
        val useAmoledTheme = prefs.getBoolean("amoled_theme", false)
        val isDarkTheme = prefs.getBoolean("dark_theme", true)
        
        if (useAmoledTheme && isDarkTheme) {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —á–µ—Ä–Ω—ã–π —Ñ–æ–Ω —Ç–æ–ª—å–∫–æ –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
            AmoledDynamicColorScheme.applyAmoledBackgroundToView(binding.root)
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º AMOLED —Å—Ç–∏–ª—å –∫ Toolbar
            AmoledDynamicColorScheme.applyAmoledToolbarStyle(binding.toolbar, this)
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º AMOLED —Ñ–æ–Ω –∫ AppBarLayout –∫–∞–∫ –≤ MainActivity
            binding.appBarLayout.setBackgroundColor(android.graphics.Color.BLACK)
            
            Log.d(TAG, "‚úÖ AMOLED —Å—Ç–∏–ª—å –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ Settings (–≤–∫–ª—é—á–∞—è Toolbar –∏ AppBarLayout)")
        }
    }

    override fun onResume() {
        super.onResume()
        
        // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º AMOLED —Å—Ç–∏–ª—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        applyAmoledThemeIfNeeded()
    }

    private fun setupToolbar() {
        try {
            val toolbar: MaterialToolbar = binding.toolbar
            setSupportActionBar(toolbar)
            supportActionBar?.apply {
                title = getString(R.string.action_settings)
                setDisplayHomeAsUpEnabled(true)
                setDisplayShowTitleEnabled(true)
            }
            Log.d(TAG, "‚úÖ Toolbar –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ toolbar", e)
        }
    }

    private fun setupSwitches() {
        // –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫
        binding.switchAutostart.isChecked = prefs.getBoolean("autostart", false)
        binding.switchAutostart.setOnCheckedChangeListener { _, isChecked ->
            prefs.edit().putBoolean("autostart", isChecked).apply()
            Log.d(TAG, "–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ ${if (isChecked) "–≤–∫–ª—é—á–µ–Ω" else "–æ—Ç–∫–ª—é—á–µ–Ω"}")
        }

        // –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
        binding.switchTheme.isChecked = prefs.getBoolean("dark_theme", true)
        binding.switchTheme.setOnCheckedChangeListener { _, isChecked ->
            prefs.edit().putBoolean("dark_theme", isChecked).apply()
            AppCompatDelegate.setDefaultNightMode(
                if (isChecked) AppCompatDelegate.MODE_NIGHT_YES else AppCompatDelegate.MODE_NIGHT_NO
            )
            
            Log.d(TAG, "–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${if (isChecked) "—Ç–µ–º–Ω—É—é" else "—Å–≤–µ—Ç–ª—É—é"}")
            
            // –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞, –æ—Ç–∫–ª—é—á–∞–µ–º AMOLED
            if (!isChecked && binding.switchAmoledTheme.isChecked) {
                binding.switchAmoledTheme.isChecked = false
                prefs.edit().putBoolean("amoled_theme", false).apply()
                Log.d(TAG, "AMOLED —Ç–µ–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É")
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AMOLED –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
            updateAmoledSwitchState()
            
            // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
            restartActivity()
        }

        // Material You
        binding.switchMaterialYou.isEnabled = Build.VERSION.SDK_INT >= Build.VERSION_CODES.S
        binding.switchMaterialYou.isChecked = prefs.getBoolean("material_you", false)
        binding.switchMaterialYou.setOnCheckedChangeListener { _, isChecked ->
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                prefs.edit().putBoolean("material_you", isChecked).apply()
                
                Log.d(TAG, "Material You ${if (isChecked) "–≤–∫–ª—é—á–µ–Ω" else "–æ—Ç–∫–ª—é—á–µ–Ω"}")

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                val message = if (isChecked) {
                    if (prefs.getBoolean("amoled_theme", false)) {
                        getString(R.string.material_you_amoled_enabled)
                    } else {
                        getString(R.string.material_you_enabled)
                    }
                } else {
                    getString(R.string.material_you_disabled)
                }
                
                Toast.makeText(this, message, Toast.LENGTH_LONG).show()

                // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π —Å—Ç–µ–∫–∞
                val intent = Intent(this, MainActivity::class.java)
                intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
                startActivity(intent)
                finish()
            } else {
                binding.switchMaterialYou.isChecked = false
                Toast.makeText(this, R.string.material_you_unavailable, Toast.LENGTH_SHORT).show()
                Log.w(TAG, "–ü–æ–ø—ã—Ç–∫–∞ –≤–∫–ª—é—á–∏—Ç—å Material You –Ω–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π –≤–µ—Ä—Å–∏–∏ Android")
            }
        }

        // AMOLED —Ç–µ–º–∞
        binding.switchAmoledTheme.isChecked = prefs.getBoolean("amoled_theme", false)
        binding.switchAmoledTheme.setOnCheckedChangeListener { _, isChecked ->
            if (isChecked && !binding.switchTheme.isChecked) {
                // –ï—Å–ª–∏ –ø—ã—Ç–∞–µ–º—Å—è –≤–∫–ª—é—á–∏—Ç—å AMOLED, –Ω–æ —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞
                binding.switchAmoledTheme.isChecked = false
                Toast.makeText(this, R.string.enable_dark_theme_first, Toast.LENGTH_SHORT).show()
                Log.w(TAG, "–ü–æ–ø—ã—Ç–∫–∞ –≤–∫–ª—é—á–∏—Ç—å AMOLED —Ç–µ–º—É –±–µ–∑ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã")
                return@setOnCheckedChangeListener
            }
            
            prefs.edit().putBoolean("amoled_theme", isChecked).apply()
            
            Log.d(TAG, "AMOLED —Ç–µ–º–∞ ${if (isChecked) "–≤–∫–ª—é—á–µ–Ω–∞" else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"}")
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            val message = if (isChecked) {
                if (prefs.getBoolean("material_you", false)) {
                    getString(R.string.amoled_material_you_enabled)
                } else {
                    getString(R.string.amoled_theme_enabled)
                }
            } else {
                getString(R.string.amoled_theme_disabled)
            }
            
            Toast.makeText(this, message, Toast.LENGTH_LONG).show()
            
            // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π —Å—Ç–µ–∫–∞
            val intent = Intent(this, MainActivity::class.java)
            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
            startActivity(intent)
            finish()
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è AMOLED –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        updateAmoledSwitchState()
    }

    private fun setupNetworkFields() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã
        val proxyPort = prefs.getInt("proxy_port", DEFAULT_PROXY_PORT)
        val dnsPort = prefs.getInt("dns_port", DEFAULT_DNS_PORT)
        
        binding.editTextProxyPort.setText(proxyPort.toString())
        binding.editTextDnsPort.setText(dnsPort.toString())
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        binding.editTextProxyPort.setOnFocusChangeListener { _, hasFocus ->
            if (!hasFocus) {
                validateAndSaveProxyPort()
            }
        }
        
        binding.editTextDnsPort.setOnFocusChangeListener { _, hasFocus ->
            if (!hasFocus) {
                validateAndSaveDnsPort()
            }
        }
    }

    private fun validateAndSaveProxyPort() {
        val portText = binding.editTextProxyPort.text.toString()
        when {
            portText.isEmpty() -> {
                binding.textInputLayoutProxyPort.error = "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç"
                binding.editTextProxyPort.setText(prefs.getInt("proxy_port", DEFAULT_PROXY_PORT).toString())
            }
            portText.toIntOrNull() == null -> {
                binding.textInputLayoutProxyPort.error = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞"
                binding.editTextProxyPort.setText(prefs.getInt("proxy_port", DEFAULT_PROXY_PORT).toString())
            }
            else -> {
                val port = portText.toInt()
                if (port !in 1..65535) {
                    binding.textInputLayoutProxyPort.error = "–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 65535"
                    binding.editTextProxyPort.setText(prefs.getInt("proxy_port", DEFAULT_PROXY_PORT).toString())
                } else {
                    binding.textInputLayoutProxyPort.error = null
                    val oldPort = prefs.getInt("proxy_port", DEFAULT_PROXY_PORT)
                    
                    // –ï—Å–ª–∏ –ø–æ—Ä—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∞–≤–∏–ª–∞
                    if (oldPort != port) {
                        clearOldRulesAndUpdatePort("proxy_port", oldPort, port)
                        Log.d(TAG, "–ü–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏ –∏–∑–º–µ–Ω–µ–Ω —Å $oldPort –Ω–∞ $port")
                        Toast.makeText(this, getString(R.string.port_changed, port), Toast.LENGTH_LONG).show()
                    } else {
                        Log.d(TAG, getString(R.string.port_unchanged, port))
                    }
                }
            }
        }
    }

    private fun validateAndSaveDnsPort() {
        val portText = binding.editTextDnsPort.text.toString()
        when {
            portText.isEmpty() -> {
                binding.textInputLayoutDnsPort.error = "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç"
                binding.editTextDnsPort.setText(prefs.getInt("dns_port", DEFAULT_DNS_PORT).toString())
            }
            portText.toIntOrNull() == null -> {
                binding.textInputLayoutDnsPort.error = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞"
                binding.editTextDnsPort.setText(prefs.getInt("dns_port", DEFAULT_DNS_PORT).toString())
            }
            else -> {
                val port = portText.toInt()
                if (port !in 1..65535) {
                    binding.textInputLayoutDnsPort.error = "–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 65535"
                    binding.editTextDnsPort.setText(prefs.getInt("dns_port", DEFAULT_DNS_PORT).toString())
                } else {
                    binding.textInputLayoutDnsPort.error = null
                    val oldPort = prefs.getInt("dns_port", DEFAULT_DNS_PORT)
                    
                    // –ï—Å–ª–∏ –ø–æ—Ä—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∞–≤–∏–ª–∞
                    if (oldPort != port) {
                        clearOldRulesAndUpdatePort("dns_port", oldPort, port)
                        Log.d(TAG, "–ü–æ—Ä—Ç DNS –∏–∑–º–µ–Ω–µ–Ω —Å $oldPort –Ω–∞ $port")
                        Toast.makeText(this, getString(R.string.port_changed, port), Toast.LENGTH_LONG).show()
                    } else {
                        Log.d(TAG, getString(R.string.port_unchanged, port))
                    }
                }
            }
        }
    }

    /**
     * –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—Ä—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
     */
    private fun clearOldRulesAndUpdatePort(portKey: String, oldPort: Int, newPort: Int) {
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–æ—Ä—Ç
            prefs.edit().putInt(portKey, newPort).apply()
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –Ω–∞–±–æ—Ä UID
            val selectedUids = prefs.getStringSet("selected_uids", emptySet()) ?: emptySet()
            
            if (selectedUids.isNotEmpty()) {
                val uidsString = selectedUids.joinToString(" ")
                
                // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –ø–æ—Ä—Ç–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª–∞—Å—Å IptablesService
                Log.d(TAG, "–°—Ç–∞—Ä—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏: –ø—Ä–æ–∫—Å–∏=$oldPort, DNS=$oldPort")
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤
                IptablesService.clearAllRulesForUids(uidsString)
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–æ—Ä—Ç
                prefs.edit().putInt(portKey, newPort).apply()
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Å –Ω–æ–≤—ã–º–∏ –ø–æ—Ä—Ç–∞–º–∏
                Log.d(TAG, "üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Å –Ω–æ–≤—ã–º–∏ –ø–æ—Ä—Ç–∞–º–∏")
                IptablesService.applyRules(this, uidsString)
                
                Log.d(TAG, "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö UID, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–æ—Ä—Ç
                prefs.edit().putInt(portKey, newPort).apply()
                Log.d(TAG, "üìù –ü–æ—Ä—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∞–≤–∏–ª (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö UID)")
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—Ç–æ–≤", e)
            Toast.makeText(this, getString(R.string.port_update_error, e.message), Toast.LENGTH_LONG).show()
        }
    }

    private fun updateAmoledSwitchState() {
        val isDarkTheme = binding.switchTheme.isChecked
        binding.switchAmoledTheme.isEnabled = isDarkTheme
        
        if (!isDarkTheme && binding.switchAmoledTheme.isChecked) {
            binding.switchAmoledTheme.isChecked = false
            prefs.edit().putBoolean("amoled_theme", false).apply()
            Log.d(TAG, "AMOLED –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω –∏ —Å–±—Ä–æ—à–µ–Ω –∏–∑-–∑–∞ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã")
        }
    }

    private fun restartActivity() {
        Log.d(TAG, "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Settings –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã")
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
        val intent = intent
        finish()
        startActivity(intent)
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
            // Android 14+ (API 34+) - –Ω–æ–≤—ã–π API
            overrideActivityTransition(
                OVERRIDE_TRANSITION_CLOSE,
                android.R.anim.fade_in,
                android.R.anim.fade_out
            )
        } else {
            // –°—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ Android - —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –Ω–æ —Ä–∞–±–æ—á–∏–π API
            @Suppress("DEPRECATION")
            overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)
        }
    }

    private fun setupEdgeToEdge() {
        try {
            // –í–∫–ª—é—á–∞–µ–º edge-to-edge —Ä–µ–∂–∏–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º WindowCompat (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API)
            WindowCompat.setDecorFitsSystemWindows(window, false)

            // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã
            val isDarkTheme = prefs.getBoolean("dark_theme", true)

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
                // –î–ª—è API 30+ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π WindowInsetsController
                val insetsController = window.insetsController
                if (isDarkTheme) {
                    insetsController?.setSystemBarsAppearance(0, 
                        android.view.WindowInsetsController.APPEARANCE_LIGHT_STATUS_BARS or
                        android.view.WindowInsetsController.APPEARANCE_LIGHT_NAVIGATION_BARS)
                } else {
                    insetsController?.setSystemBarsAppearance(
                        android.view.WindowInsetsController.APPEARANCE_LIGHT_STATUS_BARS or
                        android.view.WindowInsetsController.APPEARANCE_LIGHT_NAVIGATION_BARS,
                        android.view.WindowInsetsController.APPEARANCE_LIGHT_STATUS_BARS or
                        android.view.WindowInsetsController.APPEARANCE_LIGHT_NAVIGATION_BARS)
                }
            } else {
                // –î–ª—è –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º WindowInsetsControllerCompat
                val windowInsetsController = WindowCompat.getInsetsController(window, window.decorView)
                windowInsetsController.isAppearanceLightStatusBars = !isDarkTheme
                windowInsetsController.isAppearanceLightNavigationBars = !isDarkTheme
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö UI –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ MainActivity
            ViewCompat.setOnApplyWindowInsetsListener(binding.root) { _, insets ->
                val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
                
                // AppBarLayout –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ—Ä—Ö–Ω–∏–π –æ—Ç—Å—Ç—É–ø –±–ª–∞–≥–æ–¥–∞—Ä—è fitsSystemWindows="true"
                // –ù–∞–º –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–∫–æ–≤—ã–µ –∏ –Ω–∏–∂–Ω–∏–π –æ—Ç—Å—Ç—É–ø—ã
                binding.root.setPadding(
                    systemBars.left,
                    0, // –í–µ—Ä—Ö–Ω–∏–π –æ—Ç—Å—Ç—É–ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è AppBarLayout
                    systemBars.right,
                    systemBars.bottom
                )
                
                insets
            }
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ edge-to-edge", e)
        }
    }

    override fun onSupportNavigateUp(): Boolean {
        finish()
        return true
    }
    
    override fun onPause() {
        super.onPause()
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—Ç—ã –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        validateAndSaveProxyPort()
        validateAndSaveDnsPort()
    }
}
